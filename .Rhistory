aes(x = happ.diff)) +
geom_histogram()
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_histogram(bins = 20)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density()
?if_else
DF.s3 <- DF.l.inc %>%
# select relevant variables
select(ResponseId, lab,
trial, happiness) %>%
# pivot wider
pivot_wider(id_cols = ResponseId,
names_from = trial,
values_from = happiness) %>%
# compute difference score
rowwise() %>%
mutate(happ.diff = happy - neutral,
eff = if_else(condition = happ.diff > 0,
true = 1,
false = 0)) %>%
ungroup()
DF.s3$eff %>% mean()
View(DF.s3)
DF.l.inc %>% names()
DF.s3 <- DF.l.inc %>%
# select relevant variables
select(ResponseId, lab,
condition,
trial, happiness) %>%
# pivot wider
pivot_wider(id_cols = ResponseId,
names_from = trial,
values_from = happiness) %>%
# compute difference score
rowwise() %>%
mutate(happ.diff = happy - neutral,
eff = if_else(condition = happ.diff > 0,
true = 1,
false = 0)) %>%
ungroup()
table(DF.s3$eff, DF.s3$condition)
DF.s3 <- DF.l.inc %>%
# select relevant variables
select(ResponseId, lab,
condition,
trial, happiness)
DF.s3 <- DF.l.inc %>%
# select relevant variables
select(ResponseId, lab,
condition,
trial, happiness) %>%
# pivot wider
pivot_wider(id_cols = ResponseId,
names_from = trial,
values_from = happiness) %>%
# compute difference score
rowwise() %>%
mutate(happ.diff = happy - neutral,
eff = if_else(condition = happ.diff > 0,
true = 1,
false = 0)) %>%
ungroup()
table(DF.s3$eff, DF.s3$condition)
View(DF.s3)
?pivot_wider
DF.s3 <- DF.l.inc %>%
# select relevant variables
select(ResponseId, lab,
condition,
trial, happiness) %>%
# pivot wider
pivot_wider(#id_cols = ResponseId,
names_from = trial,
values_from = happiness)
View(DF.s3)
DF.s3 <- DF.l.inc %>%
# select relevant variables
select(ResponseId, lab,
condition,
trial, happiness) %>%
# pivot wider
pivot_wider(#id_cols = ResponseId,
names_from = trial,
values_from = happiness) %>%
# compute difference score
rowwise() %>%
mutate(happ.diff = happy - neutral,
eff = if_else(condition = happ.diff > 0,
true = 1,
false = 0)) %>%
ungroup()
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density()
geom_histogram(bins = 20)
table(DF.s3$eff, DF.s3$condition)
table(DF.s3$eff, DF.s3$condition) %>%
prop.table()
251/(251 +226)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(condition)
DF.s3 %>% names()
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition))
?geom_density
DF.s3 %>%
group_by(condition) %>%
summarise(mean(happ.diff))
DF.s3 %>%
group_by(condition) %>%
summarise(prop = round(mean(happ.diff),2) * 100)
DF.s3 %>% filter(condition == "pen in mouth")
DF.s3 %>% filter(condition == "pen-in-mouth")
DF.s3 %>% filter(condition == "pen-in-mouth") %>% View()
desc <- DF.s3 %>%
group_by(condition) %>%
summarise(prop = round(mean(happ.diff),2) * 100)
desc
desc <- DF.s3 %>%
group_by(condition) %>%
summarise(prop = round(mean(happ.diff),2) * 100) %>%
mutate(prop = paste0(prop, "%"))
desc
tmp <-
outer_join(DF.s3, desc)
?merge
tmp <-
merge(DF.s3, desc)
View(tmp)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition))
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
labs(x = "tmp")
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
labs(x = "difference in self-reported happiness between happy and neutral facial expression poses")
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label = prop),
x = -2.5,
y = 1.5,
size = 3,
hjust = 0,
vjust = 1.25)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label = prop),
x = -3,
y = 2,
size = 3,
hjust = 0,
vjust = 1.25)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label = prop),
x = -3,
y = 2,
size = 3,
hjust = 0)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label = prop),
x = -3,
y = 1.7,
size = 3,
hjust = 0)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label = prop),
x = -3.25,
y = 1.75,
size = 3,
hjust = 0)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label = prop),
x = -3.5,
y = 1.75,
size = 3,
hjust = 0)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label =
paste0(prop,
" positive scores")),
x = -3.5,
y = 1.75,
size = 3,
hjust = 0)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label =
paste0(prop,
" positive scores")),
x = -4,
y = 1.8,
size = 3)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label =
paste0(prop,
" positive scores")),
x = -3.6,
y = 1.8,
size = 3)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label =
paste0(prop,
" positive scores")),
x = -3.5,
y = 1.8,
size = 3)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label =
paste0(prop,
" positive scores")),
x = -3.4,
y = 1.8,
size = 3)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label =
paste0(prop,
" positive scores")),
x = -3.25,
y = 1.8,
size = 3)
y = 1.8,
size = 3)
ggplot(data = DF.s3,
aes(x = happ.diff)) +
geom_density() +
facet_wrap(vars(condition)) +
geom_text(data = desc,
aes(label =
paste0(prop,
" positive scores")),
x = -3,
y = 1.8,
size = 3)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# descriptives
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# n participants who met inclusion criteria
DF.l.inc$ResponseId %>% unique() %>% length()
models <- readRDS("output/analyses/freq.models.Rds")
tmp <-
lmer(tsk ~ trial * image * condition +
(1 | lab) +
(1 | ResponseId),
data = DF.l.full.inc)
anova(tmp)
joint_tests(tmp,
by = "condition",
lmerTest.limit = 3008)
emmeans(tmp,
pairwise ~ trial | condition | image,
adjust = "none")
tmp <-
lmer(tsk ~ trial * image * condition +
(1 | lab) +
(1 | ResponseId),
data = DF.l.inc)
anova(tmp)
DF.l.inc %>% names()
tmp <-
lmer(lke ~ trial * image * condition +
(1 | lab) +
(1 | ResponseId),
data = DF.l.inc)
anova(tmp)
anova(models[["primary"]][["prereg.noRS"]])
joint_tests(models[["primary"]][["prereg.noRS"]],
by = "condition",
lmerTest.limit = 9999)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# descriptives
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# n participants who met inclusion criteria
DF.l.inc$ResponseId %>% unique() %>% length()
models <- readRDS("output/analyses/freq.models.Rds")
library(sjPlot)
install.packages('sjPlot')
library('sjPlot')
models[["primary"]][["prereg"]] %>%
tablmodel()
models[["primary"]][["prereg"]] %>%
tab_model()
?tab_model
models[["primary"]][["prereg"]] %>%
tab_model(show.r2 = T)
models[["primary"]][["prereg"]] %>%
r2()
install.packages('performance')
install.packages("performance")
library("performance")
models[["primary"]][["prereg"]] %>%
r2()
models[["primary"]][["prereg.noRS"]] %>%
r2()
library('sjstats')
models[["primary"]][["prereg.noRS"]] %>%
std_beta
library('sjstats')
library('parameters')
models[["primary"]][["prereg.noRS"]] %>%
model_parameters(.,
standardize = "smart")
model_parameters(models[["primary"]][["prereg.noRS"]],
standardize = "smart")
?model_parameters
model_parameters(model = models[["primary"]][["prereg.noRS"]],
standardize = "smart")
model_parameters(model = models[["primary"]][["prereg.noRS"]],
standardize = "posthoc")
model_parameters(model = models[["primary"]][["prereg.noRS"]],
standardize = "basic")
models[["primary"]][["prereg.noRS"]]
stdCoef.merMod <- function(object) {
sdy <- sd(getME(object,"y"))
sdx <- apply(getME(object,"X"), 2, sd)
sc <- fixef(object)*sdx/sdy
se.fixef <- coef(summary(object))[,"Std. Error"]
se <- se.fixef*sdx/sdy
return(data.frame(stdcoef=sc, stdse=se))
}
stdCoef.merMod(models[["primary"]][["prereg.noRS"]])
models[["primary"]][["prereg.noRS"]]
