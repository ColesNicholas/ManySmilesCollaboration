# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'ggtext', 'metafor',
'ggpubr', "gridExtra",
"sf", "rnaturalearth", "rnaturalearthdata",
"ggspatial"
)
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35",
size = .35),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none",
axis.title = element_text(size = 6),
axis.text = element_text(size = 5),
axis.line = element_line(size = .25),
axis.ticks = element_line(size = .25),
strip.text.x = element_text(size = 5),
strip.text.y = element_text(size = 5)
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
DF.l <- DF.l %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 4
DF.l.full <- DF.l.full %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 5
DF.l.inc <- DF.l.inc %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 6
# download world data
world <- ne_countries(scale = "medium",
returnclass = "sf")
# download msc country data
msc <- read.csv("data/country.n.csv")[, 2:3] %>%
arrange(n) %>%
rename(iso_a3 = country)
# merge datasets
msworld <- left_join(world, msc,
by = 'iso_a3') %>%
mutate(n = ifelse(is.na(n),
0,
n)) %>%
select(iso_a3, n) %>%
arrange(-n)
# plot data
pdf(file = "output/figures/Figure1.pdf",
width = 3.46,
height = 3.46)
ggplot() +
layer_spatial(data = msworld,
aes(fill = n),
color = NA)+
coord_sf(crs = 'ESRI:54030') +
scale_fill_gradient(low = '#D0CECE',
high = "#820000") +
cowplot::theme_minimal_grid() +
theme(legend.position = 'top',
legend.title = element_text(size = 7),
legend.text = element_text(size = 5),
legend.key.width= unit(1.4, 'cm'),
legend.key.height= unit(.1, 'cm'),
legend.margin = margin(b = -10),
legend.justification = "center",
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major = element_line(size = .2))
dev.off()
write.csv(x = msc,
file = "data/source/Fig1_Source.csv",
row.names = F)
rm(msc, msworld, world)
# Chunk 7
f2.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
# select relevant variables
select(ResponseId, trial, happiness,
image, condition) %>%
# recode trial
mutate(trial = recode(trial,
`filler 1`  = "filler",
`filler 2`  = "filler"))
pdf(file = "output/figures/Figure2.pdf",
width = 3.46,
height = 3.46)
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = .22,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .25,
width = .10,
fun.data = mean_se,
geom = "errorbar") +
# adjust scales
scale_x_discrete(
expand = expand_scale(mult = c(.2, .2))) +
scale_y_continuous(
breaks = c(1, 3, 5, 7)) +
labs(y = "Self-reported happiness",
x = "Task")
dev.off()
write.csv(x = f2.DF,
file = "data/source/Fig2_Source.csv",
row.names = F)
rm(f2.DF)
# Chunk 8
DF.3 <- DF.l %>%
# select relevant variables
select(ResponseId, trial, condition,
happiness,
awareness, qulty_rate_var,
qulty_feel_var, qulty_smlr_var,
indiv_body) %>%
# calculate a difference score between the happy and neutral poses
pivot_wider(names_from = trial,
values_from = happiness) %>%
rowwise() %>%
mutate(happ.diff = happy - neutral) %>%
ungroup() %>%
select(-c(happy, neutral, ResponseId))
# prepare plots
f1 <- ggplot(DF.3,
aes(x = qulty_rate_var,
y = happ.diff))  +
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
geom_smooth(method = 'lm',
size = .25) +
xlab("compliance") +
ylab("change in happiness") +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
f2 <- ggplot(DF.3,
aes(x = qulty_smlr_var,
y = happ.diff))  +
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
geom_smooth(method = 'lm',
size = .25) +
theme(axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
xlab("similarity")+
scale_x_continuous(
breaks = c(1, 3, 5, 7))
f3 <- ggplot(DF.3,
aes(x = qulty_feel_var,
y = happ.diff))  +
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey")+
geom_smooth(method = 'lm',
size = .25) +
theme(axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
xlab("genuineness")+
scale_x_continuous(
breaks = c(1, 3, 5, 7))
f4 <- ggplot(DF.3,
aes(x = awareness,
y = happ.diff))  +
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
geom_smooth(method = 'lm',
size = .25) +
xlab("hypothesis awareness") +
ylab("change in happiness") +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
f5 <- ggplot(DF.3,
aes(x = indiv_body,
y = happ.diff))  +
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
geom_smooth(method = 'lm',
size = .25) +
theme(axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
xlab("body awareness")+
scale_x_continuous(
breaks = c(1, 3, 5, 7))
# plot
pdf(file = "output/figures/Figure3.pdf",
width = 3.46,
height = 3.46)
grid.arrange(f1, f2, f3, f4, f5,
nrow = 2)
dev.off()
write.csv(x = DF.3,
file = "data/source/Fig3_Source.csv",
row.names = F)
rm(f1, f2, f3, f4, f5, DF.3)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'ggtext', 'metafor',
'ggpubr', "gridExtra",
"sf", "rnaturalearth", "rnaturalearthdata",
"ggspatial"
)
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35",
size = .35),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none",
axis.title = element_text(size = 6),
axis.text = element_text(size = 5),
axis.line = element_line(size = .25),
axis.ticks = element_line(size = .25),
strip.text.x = element_text(size = 5),
strip.text.y = element_text(size = 5)
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
DF.l <- DF.l %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 4
DF.l.full <- DF.l.full %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 5
DF.l.inc <- DF.l.inc %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 6
# download world data
world <- ne_countries(scale = "medium",
returnclass = "sf")
# download msc country data
msc <- read.csv("data/country.n.csv")[, 2:3] %>%
arrange(n) %>%
rename(iso_a3 = country)
# merge datasets
msworld <- left_join(world, msc,
by = 'iso_a3') %>%
mutate(n = ifelse(is.na(n),
0,
n)) %>%
select(iso_a3, n) %>%
arrange(-n)
# plot data
pdf(file = "output/figures/Figure1.pdf",
width = 3.46,
height = 3.46)
ggplot() +
layer_spatial(data = msworld,
aes(fill = n),
color = NA)+
coord_sf(crs = 'ESRI:54030') +
scale_fill_gradient(low = '#D0CECE',
high = "#820000") +
cowplot::theme_minimal_grid() +
theme(legend.position = 'top',
legend.title = element_text(size = 7),
legend.text = element_text(size = 5),
legend.key.width= unit(1.4, 'cm'),
legend.key.height= unit(.1, 'cm'),
legend.margin = margin(b = -10),
legend.justification = "center",
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major = element_line(size = .2))
dev.off()
write.csv(x = msc,
file = "data/source/Fig1_Source.csv",
row.names = F)
rm(msc, msworld, world)
# Chunk 7
f2.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
# select relevant variables
select(ResponseId, trial, happiness,
image, condition) %>%
# recode trial
mutate(trial = recode(trial,
`filler 1`  = "filler",
`filler 2`  = "filler"))
pdf(file = "output/figures/Figure2.pdf",
width = 3.46,
height = 3.46)
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = .22,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .25,
width = .10,
fun.data = mean_se,
geom = "errorbar") +
# adjust scales
scale_x_discrete(
expand = expand_scale(mult = c(.2, .2))) +
scale_y_continuous(
breaks = c(1, 3, 5, 7)) +
labs(y = "Self-reported happiness",
x = "Task")
dev.off()
write.csv(x = f2.DF,
file = "data/source/Fig2_Source.csv",
row.names = F)
rm(f2.DF)
