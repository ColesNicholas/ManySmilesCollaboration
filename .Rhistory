View(tmp)
# Chunk 1
# clear environment
rm(list = ls())
# set seed
set.seed(2)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'BayesFactor')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# Chunk 2
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds") %>%
mutate(ResponseId = ResponseId %>%
as.numeric() %>%
as.factor()
)
?lmBF
p <- "medium"
DF.l.inc$condition %>% clas()
DF.l.inc$condition %>% class()
p.1 <- lmBF(happiness ~ trial +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = p,
data = DF.l.inc,
iterations = 10)
DF.l.inc$condition %>% unique()
?save.image
?t
?lmBF
p.0 <-
lmBF(happiness ~ 1 +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = p,
data = DF.l.inc,
iterations = 2)
p <- p.1 / p.0
p
p@bayesFactor$bf
c@bayesFactor$bf
i <- 1
# Chunk 1
# clear environment
rm(list = ls())
# set seed
set.seed(2)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'BayesFactor')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# Chunk 2
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds") %>%
mutate(ResponseId = ResponseId %>%
as.numeric() %>%
as.factor()
) %>%
as.data.frame()
# Chunk 3
p <- "medium"
#p <- "wide"
#p <- "ultrawide"
# Chunk 4
i <- 1000
# Chunk 5
p.1 <-
lmBF(happiness ~ trial +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = p,
data = DF.l.inc,
iterations = i)
p.0 <-
lmBF(happiness ~ 1 +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = p,
data = DF.l.inc,
iterations = i)
p <- p.1 / p.0
# Chunk 6
c.1 <-
lmBF(happiness ~ condition +
ResponseId + lab + lab:condition,
whichRandom = c("ResponseId", "lab", "lab:condition"),
rscaleFixed = p,
data = DF.l.inc,
iterations = i)
c.0 <-
lmBF(happiness ~ 1 +
ResponseId + lab + lab : condition,
whichRandom = c("ResponseId", "lab", "lab:condition"),
rscaleFixed = p,
data = DF.l.inc,
iterations = i)
c <- c.1 / c.1
# Chunk 7
i.1 <-
lmBF(happiness ~ image +
ResponseId + lab + lab:image,
whichRandom = c("ResponseId", "lab", "lab:image"),
rscaleFixed = p,
data = DF.l.inc,
iterations = i)
i.0 <-
lmBF(happiness ~ 1 +
ResponseId + lab + lab:image,
whichRandom = c("ResponseId", "lab", "lab:image"),
rscaleFixed = p,
data = DF.l.inc,
iterations = i)
i <- i.1 / i.0
pr <- "medium"
#pr <- "wide"
#pr <- "ultrawide"
i <- 1
# Chunk 1
# clear environment
rm(list = ls())
# set seed
set.seed(2)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'BayesFactor')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# Chunk 2
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds") %>%
mutate(ResponseId = ResponseId %>%
as.numeric() %>%
as.factor()
) %>%
as.data.frame()
# Chunk 3
pr <- "medium"
#pr <- "wide"
#pr <- "ultrawide"
i <- 1
p.1 <-
lmBF(happiness ~ trial +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = i)
p.0 <-
lmBF(happiness ~ 1 +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = i)
p <- p.1 / p.0
c.1 <-
lmBF(happiness ~ condition +
ResponseId + lab + lab:condition,
whichRandom = c("ResponseId", "lab", "lab:condition"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = i)
c.0 <-
lmBF(happiness ~ 1 +
ResponseId + lab + lab : condition,
whichRandom = c("ResponseId", "lab", "lab:condition"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = i)
c <- c.1 / c.1
i.1 <-
lmBF(happiness ~ image +
ResponseId + lab + lab:image,
whichRandom = c("ResponseId", "lab", "lab:image"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = i)
i.0 <-
lmBF(happiness ~ 1 +
ResponseId + lab + lab:image,
whichRandom = c("ResponseId", "lab", "lab:image"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = i)
i <- i.1 / i.0
pc.1 <-
lmBF(happiness ~ trial + condition + trial:condition +
ResponseId + lab + lab:trial + lab:condition + lab:trial:condition,
whichRandom = c("ResponseId", "lab",
"lab:trial", "lab:condition",
"lab:trial:condition"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = i)
pc.0 <-
lmBF(happiness ~ trial + condition +
ResponseId + lab + lab:trial + lab:condition + lab:trial:condition,
whichRandom = c("ResponseId", "lab",
"lab:trial", "lab:condition",
"lab:trial:condition"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = i)
pc <- pc.1 / pc.0
p.1.m <-
lmBF(happiness ~ trial +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = pr,
data = subset(DF.l.inc,
condition == "mimicry"),
iterations = i)
p.0.m <-
lmBF(happiness ~ 1 +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = pr,
data = subset(DF.l.inc,
condition == "mimicry"),
iterations = i)
p.m <- p.1.m / p.0.m
p.1.v <-
lmBF(happiness ~ trial +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = pr,
data = subset(DF.l.inc,
condition == "directd"),
iterations = i)
p.0.v <-
lmBF(happiness ~ 1 +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = pr,
data = subset(DF.l.inc,
condition == "directd"),
iterations = i)
p.v <- p.1.v / p.0.v
p.1.p <-
lmBF(happiness ~ trial +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = pr,
data = subset(DF.l.inc,
condition == "pentask"),
iterations = i)
p.0.p <-
lmBF(happiness ~ 1 +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = pr,
data = subset(DF.l.inc,
condition == "pentask"),
iterations = i)
p.p <- p.1.p / p.0.p
pc.1 <-
lmBF(happiness ~ trial + condition + trial:condition +
ResponseId + lab + lab:trial + lab:condition + lab:trial:condition,
whichRandom = c("ResponseId", "lab",
"lab:trial", "lab:condition",
"lab:trial:condition"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = 10)
it = 1
pc.1 <-
lmBF(happiness ~ trial + condition + trial:condition +
ResponseId + lab + lab:trial + lab:condition + lab:trial:condition,
whichRandom = c("ResponseId", "lab",
"lab:trial", "lab:condition",
"lab:trial:condition"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = it)
pc.0 <-
lmBF(happiness ~ trial + condition +
ResponseId + lab + lab:trial + lab:condition + lab:trial:condition,
whichRandom = c("ResponseId", "lab",
"lab:trial", "lab:condition",
"lab:trial:condition"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = it)
exp.pi.1 <-
lmBF(happiness ~ trial + image + trial:image +
ResponseId + lab,
whichRandom = c("ResponseId", "lab"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = it)
exp.pi.0 <-
lmBF(happiness ~ trial + image +
ResponseId + lab,
whichRandom = c("ResponseId", "lab"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = it)
exp.pi <- exp.pi.1 / exp.pi.0
exp.pci.1 <-
lmBF(happiness ~ trial + condition + image +
trial:condition + trial:image + trial:condition +
trial:condition:image +
ResponseId + lab,
whichRandom = c("ResponseId", "lab"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = it)
exp.pci.0 <-
lmBF(happiness ~ trial + condition + image +
trial:condition + trial:image + trial:condition +
ResponseId + lab,
whichRandom = c("ResponseId", "lab"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = it)
exp.pci <- exp.pci.1 / exp.pci.0
bayes.models <-
list(p.1 = p.1,
p.0 = p.0,
c.1 = c.1,
c.0 = c.0,
i.1 = it.1,
i.0 = it.0,
pc.1 = pc.1,
pc.0 = pc.0,
p.1.m = p.1.m,
p.0.m = p.0.m,
p.1.v = p.1.v,
p.0.v = p.0.v,
p.1.p = p.1.p,
p.0.p = p.0.p,
exp.pi.1 = exp.pi.1,
exp.pi.0 = exp.pi.0,
exp.pci.1 = exp.pci.1,
exp.pci.0 = exp.pci.0)
saveRDS(bayes.models, file = "output/analyses/bayes.models.Rds")
bayes.models <-
list(p.1 = p.1,
p.0 = p.0,
c.1 = c.1,
c.0 = c.0,
i.1 = i.1,
i.0 = i.0,
pc.1 = pc.1,
pc.0 = pc.0,
p.1.m = p.1.m,
p.0.m = p.0.m,
p.1.v = p.1.v,
p.0.v = p.0.v,
p.1.p = p.1.p,
p.0.p = p.0.p,
exp.pi.1 = exp.pi.1,
exp.pi.0 = exp.pi.0,
exp.pci.1 = exp.pci.1,
exp.pci.0 = exp.pci.0)
saveRDS(bayes.models, file = "output/analyses/bayes.models.Rds")
output <-
c(p@bayesFactor$bf,
c@bayesFactor$bf,
i@bayesFactor$bf,
pc@bayesFactor$bf,
p.m@bayesFactor$bf,
p.v@bayesFactor$bf,
p.p@bayesFactor$bf,
exp.pi@bayesFactor$bf,
exp.pci@bayesFactor$bf
)
write.table(t(round(exp(output), 2)),
file = "output/analyses/BayesFactor.txt",
quote = F,
col.names = F,
row.names = F,
append = T)
bayes.models <-
list(p.1 = p.1,
p.0 = p.0,
c.1 = c.1,
c.0 = c.0,
i.1 = i.1,
i.0 = i.0,
pc.1 = pc.1,
pc.0 = pc.0,
p.1.m = p.1.m,
p.0.m = p.0.m,
p.1.v = p.1.v,
p.0.v = p.0.v,
p.1.p = p.1.p,
p.0.p = p.0.p,
exp.pi.1 = exp.pi.1,
exp.pi.0 = exp.pi.0,
exp.pci.1 = exp.pci.1,
exp.pci.0 = exp.pci.0)
saveRDS(bayes.models,
file = paste0("output/analyses/bayes.models.",
pr,
".Rds")
)
output <-
c(p@bayesFactor$bf,
c@bayesFactor$bf,
i@bayesFactor$bf,
pc@bayesFactor$bf,
p.m@bayesFactor$bf,
p.v@bayesFactor$bf,
p.p@bayesFactor$bf,
exp.pi@bayesFactor$bf,
exp.pci@bayesFactor$bf
)
write.table(t(round(exp(output), 2)),
file = paste0("output/analyses/BayesFactor",
pr,
".txt"),
quote = F,
col.names = F,
row.names = F,
append = T)
pc
p.m
pc.0
i.0
pc.1
pc.0
pc
it = 10
pc.1 <-
lmBF(happiness ~ trial + condition + trial:condition +
ResponseId + lab + lab:trial + lab:condition + lab:trial:condition,
whichRandom = c("ResponseId", "lab",
"lab:trial", "lab:condition",
"lab:trial:condition"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = it)
pc.0 <-
lmBF(happiness ~ trial + condition +
ResponseId + lab + lab:trial + lab:condition + lab:trial:condition,
whichRandom = c("ResponseId", "lab",
"lab:trial", "lab:condition",
"lab:trial:condition"),
rscaleFixed = pr,
data = DF.l.inc,
iterations = it)
pc@bayesFactor$bf
p.m@bayesFactor$bf
pc
exp.pci@bayesFactor$bf
exp.pi@bayesFactor$bf
p.p@bayesFactor
p.p@bayesFactor$b
p.p@bayesFactor$bf
p.m@bayesFactor$bf
pc@bayesFactor$bf
p.1.m
p.1.m <-
lmBF(happiness ~ trial +
ResponseId + lab + lab:trial,
whichRandom = c("ResponseId", "lab", "lab:trial"),
rscaleFixed = pr,
data = subset(DF.l.inc,
condition == "mimicry"),
iterations = it,
noSample = F)
p.1.m
saveRDS(bayes.models,
file = paste0(#"output/analyses/",
"bayes.models.",
pr,
".Rds")
)
save.image(paste0("BayesFactorAnalyses",
pr,
".RData")
)
