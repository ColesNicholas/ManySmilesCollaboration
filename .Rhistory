exp.pci@bayesFactor$bf,
exp.ci@bayesFactor$bf,
exp.p.p@bayesFactor$bf,
exp2.p.p@bayesFactor$bf)
write.table(t(round(exp(output), 2)),
file = paste0(#"output/analyses/", # commented out for now
"BayesFactor.",
pr,
".txt"),
quote = F,
col.names = F,
row.names = F,
append = T)
save.image(paste0("BayesFactorAnalyses",
pr,
".RData")
)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# descriptives
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# n participants who met inclusion criteria
DF.l.inc$ResponseId %>% unique() %>% length()
?readRDS
models <- readRDS("output/analyses/freq.models.Rds")
anova(models[["primary"]][["prereg"]])
joint_tests(models[["primary"]][["prereg"]],
by = "condition",
lmerTest.limit = 9999)
emmeans(models[["primary"]][["prereg"]],
pairwise ~ trial | condition,
adjust = "none")
summary(models[["primary"]][["prereg"]])
confint(models[["primary"]][["prereg"]])
?lmer
data("sleepstudy", package="lme4")
m <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
class(m) # lmerModLmerTest
m %>% summary()
m %>% confint()
10.467 + (1.96 * 1.546)
10.467 - (1.96 * 1.546)
?confint
fit <- lm(100/mpg ~ disp + hp + wt + am, data = mtcars)
confint(fit)
confint(fit, "wt")
fit %>% summary()
1.001303   + 1.96*0.302761
1.001303   + 2*0.302761
confint
confint %>% View()
joint_tests(models[["secondary"]][["alt.exp"]],
by = "image",
lmerTest.limit = 9999)
summary(models[["secondary"]][["alt.exp"]])
View(models)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# descriptives
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# n participants who met inclusion criteria
DF.l.inc$ResponseId %>% unique() %>% length()
models <- readRDS("output/analyses/freq.models.Rds")
?if_else
DF.l.inc$trial %>% uniquee()
DF.l.inc$trial %>% unique()
DF.l.full.inc$trial %>% unique()
tmp.DF %>%
DF.l.full.inc %>%
filter(trial != "neutr") %>%
mutate(trial = if_else(trial = "happy",
true = "happy",
false = "filler"))
tmp.DF <- DF.l.full.inc %>%
filter(trial != "neutr") %>%
mutate(trial = if_else(trial = "happy",
true = "happy",
false = "filler"))
tmp.DF <- DF.l.full.inc %>%
filter(trial != "neutr") %>%
mutate(trial = if_else(condition = trial == "happy",
true = "happy",
false = "filler"))
tmp.DF <- DF.l.full.inc %>%
filter(trial != "neutr") %>%
mutate(trial = if_else(condition = trial == "happy",
true = "happy",
false = "filler")
) %>%
mutate(trial = factor(trial))
models[["secondary"]][["alt.exp"]] <-
lmer(happiness ~ trial.r * condition * image +
(1 | lab) + (1 | ResponseId) +
(0 + trial.r | lab) +
(0 + condition | lab)  +
(0 + image | lab) +
(0 + trial.r : image | lab) +
(0 + trial.r : condition | lab)  +
(0 + condition : image | lab) +
(0 + trial.r : condition : image | lab),
data = tmp.DF)
tmp.DF <- DF.l.full.inc %>%
filter(trial != "neutr") %>%
mutate(trial.r = if_else(condition = trial == "happy",
true = "happy",
false = "filler")
) %>%
mutate(trial.r = factor(trial.r))
tmp.DF %>% select(trial, trial.r) %>% View()
models[["secondary"]][["alt.exp"]] <-
lmer(happiness ~ trial.r * condition * image +
(1 | lab) + (1 | ResponseId) +
(0 + trial.r | lab) +
(0 + condition | lab)  +
(0 + image | lab) +
(0 + trial.r : image | lab) +
(0 + trial.r : condition | lab)  +
(0 + condition : image | lab) +
(0 + trial.r : condition : image | lab),
data = tmp.DF)
models[["secondary"]][["alt.exp.noRS"]] <-
lmer(happiness ~ trial.r * condition * image +
(1 | lab) + (1 | ResponseId),
data = tmp.DF)
write_rds(models, "output/analyses/freq.models.Rds")
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# descriptives
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# n participants who met inclusion criteria
DF.l.inc$ResponseId %>% unique() %>% length()
models <- readRDS("output/analyses/freq.models.Rds")
summary(models[["primary"]][["prereg"]])
emmeans(models[["primary"]][["prereg"]],
pairwise ~ image,
adjust = "none")
anova(models[["primary"]][["prereg"]])
emmeans(models[["primary"]][["prereg"]],
pairwise ~ trial,
adjust = "none")
anova(models[["primary"]][["prereg"]])
emmeans(models[["primary"]][["prereg"]],
pairwise ~ trial | condition,
adjust = "none")
joint_tests(models[["primary"]][["prereg"]],
by = "condition",
lmerTest.limit = 9999)
tmp.DF <- DF.l.full.inc %>%
filter(trial != "neutr") %>%
mutate(trial.r = if_else(condition = trial == "happy",
true = "happy",
false = "filler")
) %>%
mutate(trial.r = factor(trial.r))
anova(models[["secondary"]][["alt.exp"]])
joint_tests(models[["secondary"]][["alt.exp"]],
by = "image",
lmerTest.limit = 9999)
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial.r | condition | image,
adjust = "none")
?emmeans
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial.r | condition,
at = list(image == "absent"),
adjust = "none")
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial.r | condition,
at = list(image = "absent"),
adjust = "none")
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial.r | condition,
at = list(image = "absentt"),
adjust = "none")
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial.r | condition | image
adjust = "none")
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial.r | condition | image,
adjust = "none")
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial.r | condition,
at = list(image = "absentt"),
adjust = "none")
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial.r | condition,
at = list(image = "absentt"),
adjust = "none",
lmerTest.limit = 4512)
summary(models[["secondary"]][["quality.rating"]])
View(models)
summary(models[["secondary"]][["compl.mod"]])
summary(models[["secondary"]][["simil.mod"]])
summary(models[["secondary"]][["gen.mod"]])
summary(models[["secondary"]][["gen.mod"]])
anova(models[["secondary"]][["compl.diff"]])
emmeans(models[["secondary"]][["compl.diff"]],
pairwise ~ condition,
adjust = "none")
,
emmeans(models[["secondary"]][["compl.diff"]],
pairwise ~ condition,
adjust = "none",
pbkrtest.limit = 3878)
DF.w %>%
group_by(condition) %>%
summarise(m = mean(qulty_rate_var),
sd = sd(qulty_rate_var))
anova(models[["secondary"]][["compl.diff.noRS"]])
anova(models[["secondary"]][["simil.diff"]])
emmeans(models[["secondary"]][["simil.diff"]],
pairwise ~ condition,
adjust = "none")
DF.w %>%
group_by(condition) %>%
summarise(m = mean(qulty_smlr_var,
na.rm = T),
sd = sd(qulty_smlr_var,
na.rm = T))
emmeans(models[["secondary"]][["simil.diff"]],
pairwise ~ condition,
adjust = "none",
pbkrtest.limit = 3543)
anova(models[["secondary"]][["gen.diff"]])
emmeans(models[["secondary"]][["gen.diff"]],
pairwise ~ condition,
adjust = "none")
emmeans(models[["secondary"]][["gen.diff"]],
pairwise ~ condition,
adjust = "none",
lmerTest.limit = 3878)
emmeans(models[["secondary"]][["simil.diff"]],
pairwise ~ condition,
adjust = "none",
merTest.limit = 3878)
emmeans(models[["secondary"]][["simil.diff"]],
pairwise ~ condition,
adjust = "none",
lmerTest.limit = 3878)
emmeans(models[["secondary"]][["gen.diff"]],
pairwise ~ condition,
adjust = "none",
lmerTest.limit = 3878)
DF.w %>%
group_by(condition) %>%
summarise(m = mean(qulty_feel_var),
sd = sd(qulty_feel_var))
anova(models[["secondary"]][["awareness.diff"]])
DF.w %>%
group_by(condition) %>%
summarise(m.awa = mean(awareness,
na.rm = T),
sd.awa = sd(awareness,
na.rm = T))
models[["secondary"]][["awareness.mod"]] %>% summary()
models[["secondary"]][["body.aware.mod"]] %>% summary()
Anova(models[["secondary"]][["cpu.diff"]])
DF.w <- DF.w %>%
mutate(inc.dev = as.factor(inc.dev),
inc.att = as.factor(inc.att))
library(car)
Anova(models[["secondary"]][["cpu.diff"]])
Anova(models[["secondary"]][["att.diff"]])
anova(models[["secondary"]][["dis.diff"]])
anova(models[["secondary"]][["anxiety"]])
anova(models[["secondary"]][["anger"]])
emmeans(models[["secondary"]][["anger"]],
pairwise ~ condition,
adjust = "none")
emmeans(models[["secondary"]][["anxiety"]],
pairwise ~ condition,
adjust = "none")
emmeans(models[["secondary"]][["anxiety"]],
pairwise ~ condition,
adjust = "none",
lmerTest.limit = 3008)
emmeans(models[["secondary"]][["anger"]],
pairwise ~ condition,
adjust = "none")
emmeans(models[["secondary"]][["anger"]],
pairwise ~ condition,
adjust = "none",
lmerTest.limit = 3008)
summary(models[["secondary"]][["alt.exp.noRS"]])
emmeans(models[["secondary"]][["alt.exp.noRS"]],
pairwise ~ trial.r | condition | image,
adjust = "none")
emmeans(models[["primary"]][["prereg.noRS"]],
pairwise ~ trial | condition,
adjust = "none")
joint_tests(models[["primary"]][["prereg.noRS"]],
by = "condition",
lmerTest.limit = 9999)
models[["exploratory"]][["primary.noexc"]] <-
lmer(happiness ~ trial * condition * image +
(1 | lab) + (1 | ResponseId),
data = DF.l)
write_rds(models, "output/analyses/freq.models.Rds")
(models[["exploratory"]][["primary.noexc"]],
pairwise ~ trial | condition,
adjust = "none")
emmeans(models[["exploratory"]][["primary.noexc"]],
pairwise ~ trial | condition,
adjust = "none")
joint_tests(models[["exploratory"]][["primary.noexc"]],
by = "condition",
lmerTest.limit = 9999)
summary(models[["exploratory"]][["hap.anx"]])
# filter data
DF.inc.no.anx <- DF.l.inc %>%
filter(anxiety == 1)
# sample size
DF.inc.no.anx$ResponseId %>% unique %>% length()
anova(models[["exploratory"]][["no.anx"]])
joint_tests(models[["exploratory"]][["no.anx"]],
by = "condition",
lmerTest.limit = 9999)
