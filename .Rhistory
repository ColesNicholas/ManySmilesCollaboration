alpha = .2,
colour = "dark grey") +
geom_smooth(method = 'lm') +
theme(axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
xlab("body awareness")+
scale_x_continuous(
breaks = c(1, 3, 5, 7))
library("gridExtra")
grid.arrange(f1, f2, f3, f4, f5,
nrow = 2)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'qualtRics',
'googlesheets4', 'readxl',
'psych')
# using vector of packages, call Ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# allow for Type III Sums of Squares
options(contrasts = c('contr.sum', 'contr.poly'))
# Chunk 2
DF <- read.csv("data/raw/MSC_data_raw.csv")
# Chunk 3
DF[DF$ResponseId == 'R_71mBhLa0wTLkE9P', ]$lab <- "USA_02"
DF[DF$ResponseId == 'R_71mBhLa0wTLkE9P', ]$mode <- "online"
DF[DF$ResponseId == 'R_Y5eNgLXGXayulH3', ]$lab <- "USA_02"
DF[DF$ResponseId == 'R_Y5eNgLXGXayulH3', ]$mode <- "online"
DF[DF$ResponseId == 'R_336V86Y5lFAErTD', ]$lab <- "USA_02"
DF[DF$ResponseId == 'R_336V86Y5lFAErTD', ]$mode <- "online"
# Chunk 4
DF <- DF %>%
filter(ResponseId != "R_24pYUstgkOOGxLs",
ResponseId != "R_ZrG6EKkXCgsUcCd",
ResponseId != "R_Y4eZs4E4YuVAZfH",
ResponseId != "R_3nTmxu3vObT2JHh",
ResponseId != "R_3g0zJDrM9ytHC71",
ResponseId != "R_28Aq1V3WJBwwpNM",
ResponseId != "R_3lEs4Szd6p5WnkU",
ResponseId != "R_sALi2EPfHu7xhGp")
# Chunk 5
DF[!is.na(DF$comp_code) & DF$comp_code == 50011, ]$lab <- "GBR_01"
DF[!is.na(DF$comp_code) & DF$comp_code == 50011, ]$mode <- "online"
# Chunk 6
ids <-
c("R_1GD4F1SkMf9kfej", "R_9Y64npYAReaM2bv",
"R_1Dr0VPNxpieom2m", "R_33d5XLn9fbq9xKK",
"R_25A6NQrZvWRKUL4", "R_2PjsokzhdsD2vZj",
"R_2Qtk9qpd520bKMP", "R_e38EizEqLMVfA09",
"R_2BmrrTge0O7l4SU", "R_1jSOkeCyxfswvNN",
"R_3KrLO7nsoiAFwsL", "R_1ovashQAQ6fDomE",
"R_1Ej0NXzFob65t2o", "R_NVzxKo4NqK0U7fP",
"R_3FUqkkW2BKltGmW", "R_1jkPjgj145hnjtV",
"R_3nIfmyaH4kOeJcB", "R_2WHxeiVG0if6IDO",
"R_2TFfFcUCVAAsVH7", "R_UEdaTAgiXo7qnbb")
for (i in ids){
DF[DF$ResponseId == i, ]$lab <- "AUS_01"
DF[DF$ResponseId == i, ]$mode <- "online"
}
rm(i, ids)
# Chunk 7
DF <- DF %>%
filter(ResponseId != 'R_1FQAgvtC22eIEmo')
# Chunk 8
DF <- DF %>%
filter(ResponseId != 'R_3ff7VJO1aIUfhrY',
ResponseId != 'R_3J7VlYAposubTqQ',
ResponseId != 'R_2as3VAy174nEEUE',
ResponseId != 'R_25NJqFnThS6T9gw')
# Chunk 9
DF <- DF %>%
filter(ResponseId != 'R_3PSwb7kaUELPdOQ',
ResponseId != 'R_2TTWPmgmGBzJo4u',
ResponseId != 'R_31aRdUehVCYMrRo',
ResponseId != 'R_1QDTXhBqAGOgMu0',
ResponseId != 'R_22ulZEcvoGxSUAk')
# Chunk 10
DF <- DF %>%
filter(ResponseId != "R_1eK3FNOOZQZHov4",
ResponseId != "R_1giES2oovR2sJGo",
ResponseId != "R_1gvdVKTh2Q7IYvw",
ResponseId != "R_1OGBoYWh7Wy6t90",
ResponseId != "R_1OHttohbOonQR3f",
ResponseId != "R_1rGsxNubojx9p5s",
ResponseId != "R_2ab26zkYpicljIL",
ResponseId != "R_2ariEOYgWmeUb3D",
ResponseId != "R_2CJ3p00nKpIVD6p",
ResponseId != "R_2CJ3p00nKpIVD6p",
ResponseId != "R_2cnjhdhKXJO2EjU",
ResponseId != "R_2RZVdR1OUjWVKZM",
ResponseId != "R_2SxiNXD4kHPVdCK",
ResponseId != "R_2uwvT1YvWYxaCaN",
ResponseId != "R_2vc6Snh5gCe7RYs",
ResponseId != "R_2VQnnlaCBBz2ZOB",
ResponseId != "R_30wPj1MIb5h4Yx7",
ResponseId != "R_3DvATATzYPMh0MA",
ResponseId != "R_3inei4TekzBMBgC",
ResponseId != "R_3lAELDkUxJar9qx",
ResponseId != "R_3p9D1AsSzStrMbz",
ResponseId != "R_3szfC3fIUH6SDmw",
ResponseId != "R_6fbnBLbFxHrdaYp",
ResponseId != "R_74cC2EOdWmFJPdn",
ResponseId != "R_cUtMWAOJRPYKIBr",
ResponseId != "R_d0Yqdl0vmv56Y5b",
ResponseId != "R_QnxxXHNugmQ4UtH",
ResponseId != "R_RVKns4AP1CXaknL",
ResponseId != "R_Un0uPQitlSLvnFL",
ResponseId != "R_vCs5PjQe7Zw2xsl",
ResponseId != "R_W3eg3lgdvdl5n5n",
ResponseId != "R_w6562GdZqsX7WPT",
ResponseId != "R_xhAWlsmsZ5tj6qR",
ResponseId != "R_yqoCD9H8bUBnJCN",
ResponseId != "R_Z42JMemfxctMx1v",
ResponseId != "R_zTMyGcAsKIAHvBn")
# Chunk 11
DF <- DF %>%
filter(ResponseId != "R_2fHgqY784oIsl23",
ResponseId != "R_2anPJwvrQ1xvaQw",
ResponseId != "R_1rCuopgnEYbhZbe",
ResponseId != "R_1Cg0Ut7JsIUCTLt",
ResponseId != "R_1gu4j0wbEEu5NpB",
ResponseId != "R_2Vm8k8lidsF4kK7")
# Chunk 12
DF <- DF %>%
filter(ResponseId != "R_yyJM8Jbrnu9UcwN")
# Chunk 13
DF <- DF %>%
filter(ResponseId != "R_1JJH6cMwmsFEs4N")
# Chunk 14
DF <- DF %>%
filter(ResponseId != "R_1Ok4MouIQIvgj8Q",
ResponseId != "R_Y4Fp9VO9dCrgaFH")
# Chunk 15
DF <- DF %>%
filter(lab != "")
# Chunk 16
# create blank dataframe for coding data
coding.DF <- data.frame(Awareness1 = numeric(),
Distraction1 = numeric(),
Awareness2 = numeric(),
Distraction2 = numeric())
# create list of countries
countries <- DF[!is.na(DF$lab) & DF$lab != "", ]$lab %>%
unique()
# append coding data to coding.DF
for (c in countries){
# coder 1
## open coding file
coder1 <-
read_excel(path =
paste0("data/coding/",
c,
"_coder1.xlsx"),
col_types =
c("text",
"skip", "skip", "skip",
"numeric",
"skip",
"numeric"),
na = c("N/A", "NA")) %>%
## append coder number to columns
rename_at(.vars = vars(Awareness, Distraction),
function(x) paste0(x,
1))
# coder 2
## open coding file
coder2 <-
read_excel(path =
paste0("data/coding/",
c,
"_coder2.xlsx"),
col_types =
c("text",
"skip", "skip", "skip",
"numeric",
"skip",
"numeric"),
na = c("N/A", "NA")) %>%
## append coder number to columns
rename_at(.vars = vars(Awareness, Distraction),
function(x) paste0(x,
2))
# merge two coders' data
coder <- full_join(x = coder1, y = coder2,
by = 'ResponseId')
# merge coding data with coding dataframe
coding.DF <- rbind(coding.DF,
coder)
}
# merge coding.DF data with main dataframe
DF <- full_join(x = DF, y = coding.DF,
by = "ResponseId")
# delete vestigial
rm(coder, coder1, coder2, coding.DF, c, countries)
# Chunk 17
DF <- DF %>%
# remove test data
filter(DistributionChannel != 'preview') %>%
# remove participants who did not indicate that they (a) had a pen nearby, (b) completed the study on a computer, and (c) were in a setting with minimal distractions
#filter(intro_filt == "1,2,3") %>%
# remove participants who did not get through most of survey
filter(Progress > 90) %>%
# remove participants who did not answer any of the emotion reports
filter(!is.na(fil.1_emot_hap)) %>%
# select relevant variables
select(
# subject id and condition identifiers
ResponseId, lab, mode, UserLanguage, condition, image,
# filler 1 responses
fil.1_emot_ang : fil.1_emot_wor,
fil.1_diff_dq1, fil.1_like_tsk,
# neutral trial responses
neutr_emot_ang : neutr_emot_wor,
neutr_diff_dq1, neutr_like_tsk,
# happy trial responses
happy_emot_ang : happy_emot_wor,
happy_diff_dq1, happy_like_tsk,
# filler 4 responses
fil.4_emot_ang : fil.4_emot_wor,
fil.4_diff_dq1, fil.4_like_tsk,
# individual differences
indiv_gend_var, indiv_agee_var,
indiv_body_001 : indiv_body_018,
# quality control variables
Progress, Duration..in.seconds.,
metaa_data_que_Operating.System,
fil.1_math_mq1, neutr_math_mq1,
happy_math_mq1, fil.4_math_mq1,
neutr_diff_att, happy_diff_att,
qulty_rate_var, qulty_feel_var,
descr_smlr_tx1, qulty_smlr_var,
Awareness1 : Distraction2
)
# Chunk 18
DF <- DF %>%
rowwise() %>%
mutate(awareness = mean(c(Awareness1,
Awareness2)),
distraction = mean(c(Distraction1,
Distraction2))) %>%
ungroup()
# examine IRR of awareness and distraction scores
DF %>%
select(Awareness1, Awareness2) %>%
alpha()
DF %>%
select(Distraction1, Distraction2) %>%
alpha()
# delete vestigial
DF <- DF %>%
select(-c(Awareness1 : Distraction2))
# Chunk 19
DF <- DF %>%
# specific inclusion criterion
mutate(
# attention check items
inc.att = if_else(condition = neutr_diff_att == 7 &
happy_diff_att == 7,
true = 1,
false = 0),
# participant ratings of degree to which they followed instructions
inc.fol = if_else(condition = qulty_rate_var > 1,
true = 1,
false = 0),
# participant ratings of degree to which posed expressions matched image of actor
inc.mat = if_else(condition =
is.na(qulty_smlr_var) |
qulty_smlr_var > 1,
true = 1,
false = 0),
# browser
inc.dev =
if_else(condition =
metaa_data_que_Operating.System == "Android 5.1.1" |
metaa_data_que_Operating.System == "Android 7.0" |
metaa_data_que_Operating.System == "Android 7.1.2" |
metaa_data_que_Operating.System == "Android 8.0.0" |
metaa_data_que_Operating.System == "Android 8.1.0" |
metaa_data_que_Operating.System == "Android 9" |
metaa_data_que_Operating.System == "Android 10" |
metaa_data_que_Operating.System == "Android 11" |
metaa_data_que_Operating.System == "iPhone" |
metaa_data_que_Operating.System == "iPad",
true = 0,
false = 1),
# awareness
inc.awa = if_else(condition = awareness > 1,
true = 0,
false = 1),
# distraction
inc.dis = if_else(condition = distraction > 5,
true = 0,
false = 1)) %>%
# overall non-awareness inclusion criteria
mutate(inc = if_else(condition =
inc.att == 0 |
inc.fol == 0 |
inc.mat == 0 |
inc.dev == 0 |
inc.dis == 0,
true = 0,
false = 1))
# delete vestigial columns
DF <- DF %>%
select(-c(neutr_diff_att, happy_diff_att,
metaa_data_que_Operating.System))
# Chunk 20
DF <- DF %>%
mutate(qulty_rate_var.c = qulty_rate_var - mean(qulty_rate_var,
na.rm = T),
qulty_smlr_var.c = qulty_smlr_var - mean(qulty_smlr_var,
na.rm = T),
qulty_feel_var.c = qulty_feel_var - mean(qulty_feel_var,
na.rm = T),
awareness.c = awareness - mean(awareness,
na.rm = T)
)
# Chunk 21
DF <- DF %>%
mutate(country = substr(lab,
start = 1,
stop = 3))
# Chunk 22
DF[!is.na(DF$indiv_gend_var) &
DF$indiv_gend_var > 2, ]$indiv_gend_var = 3
# Chunk 23
DF.l <- DF %>%
pivot_longer(cols = c(neutr_emot_ang : neutr_like_tsk, # neutral trial responses
happy_emot_ang : happy_like_tsk, # happy trial responses
fil.1_emot_ang : fil.1_like_tsk, # filler 1 trial responses
fil.4_emot_ang : fil.4_like_tsk), # filler 4 trial responses
names_to = "dv",
values_to = "value") %>%
separate(col = "dv", into = c("trial", "outcome"),
sep = "_...._") %>%
pivot_wider(names_from = "outcome",
values_from = "value") %>%
arrange(ResponseId, trial)
# Chunk 24
DF.l <- DF.l %>%
rowwise() %>%
# happiness items
mutate(happiness = mean(c(enj, hap,
lke, sat))) %>%
# anxiety items
mutate(anxiety = mean(c(nrv, wor))) %>%
# anger itmes
rename(anger = ang) %>%
# body awareness
## reverse score item 10
mutate(indiv_body_010 = (8 - indiv_body_010)) %>%
## average all items
mutate(indiv_body = mean(c(indiv_body_001, indiv_body_002,
indiv_body_003, indiv_body_004,
indiv_body_005, indiv_body_006,
indiv_body_007, indiv_body_008,
indiv_body_009, indiv_body_010,
indiv_body_011, indiv_body_012,
indiv_body_013, indiv_body_014,
indiv_body_015, indiv_body_016,
indiv_body_017, indiv_body_018))
) %>%
ungroup() %>%
# mean center body awareness and difficulty variable (for later moderator analyses)
mutate(indiv_body.c = indiv_body - mean(indiv_body,
na.rm = T))
# Chunk 25
DF.l <- DF.l %>%
# Sort columns
select(
# subject id and condition identifiers
ResponseId, lab,
country, UserLanguage,
mode, condition, image, trial,
# emotion ratings
happiness, enj, hap, lke, sat, # happiness ratings
anxiety, nrv, wor, # anxiety ratings
anger, # anger ratings
tsk, # liking ratings
# inclusion criteria
awareness, awareness.c,
distraction, inc.att : inc,
# quality items
qulty_rate_var, qulty_feel_var, qulty_smlr_var,
qulty_rate_var.c, qulty_feel_var.c, qulty_smlr_var.c, dq1,
# demographics
indiv_gend_var, indiv_agee_var, indiv_body, indiv_body, inc
)
# Chunk 26
DF.w <- DF %>%
mutate(ResponseId = factor(ResponseId),
lab = factor(lab),
country = factor(country),
UserLanguage = factor(UserLanguage),
condition = factor(condition),
image = factor(image))
DF.l <- DF.l %>%
mutate(ResponseId = factor(ResponseId),
lab = factor(lab),
country = factor(country),
UserLanguage = factor(UserLanguage),
condition = factor(condition),
image = factor(image),
trial = factor(trial))
rm(DF)
# Chunk 27
# all participants
DF.l.full <- DF.l
# only participants who meet strict inclusion criteria
DF.l.full.inc <- DF.l %>%
filter(inc == 1,
inc.awa == 1)
# Chunk 28
DF.l <- DF.l %>%
filter(trial == "happy" |
trial == "neutr") %>%
mutate(trial = factor(trial)) # relevel trial factor
# dataset containing only participants who meet all inclusion criteria
DF.l.inc <- DF.l %>%
filter(inc == 1,
inc.awa == 1)
# Chunk 29
write_rds(DF.w, "data/processed/DF.w.rds")
write_rds(DF.l.full, "data/processed/DF.l.full.rds")
write_rds(DF.l.full.inc, "data/processed/DF.l.full.inc.rds")
write_rds(DF.l, "data/processed/DF.l.rds")
write_rds(DF.l.inc, "data/processed/DF.l.inc.rds")
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# descriptives
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# n participants who met inclusion criteria
DF.l.inc$ResponseId %>% unique() %>% length()
models <- readRDS("output/analyses/freq.models.Rds")
