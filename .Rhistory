distraction, inc.att : inc,
# quality items
qulty_rate_var, qulty_feel_var, qulty_smlr_var,
qulty_rate_var.c, qulty_feel_var.c, qulty_smlr_var.c,
# demographics
indiv_gend_var, indiv_agee_var, indiv_body, inc
)
# Chunk 26
DF.w <- DF %>%
mutate(ResponseId = factor(ResponseId),
lab = factor(lab),
country = factor(country),
UserLanguage = factor(UserLanguage),
condition = factor(condition),
image = factor(image))
DF.l <- DF.l %>%
mutate(ResponseId = factor(ResponseId),
lab = factor(lab),
country = factor(country),
UserLanguage = factor(UserLanguage),
condition = factor(condition),
image = factor(image),
trial = factor(trial))
rm(DF)
# Chunk 27
# all participants
DF.l.full <- DF.l
# only participants who meet strict inclusion criteria
DF.l.full.inc <- DF.l %>%
filter(inc == 1,
inc.awa == 1)
# Chunk 28
DF.l <- DF.l %>%
filter(trial == "happy" |
trial == "neutr") %>%
mutate(trial = factor(trial)) # relevel trial factor
# dataset containing only participants who meet all inclusion criteria
DF.l.inc <- DF.l %>%
filter(inc == 1,
inc.awa == 1)
# Chunk 29
write_rds(DF.w, "data/processed/DF.w.rds")
write_rds(DF.l.full, "data/processed/DF.l.full.rds")
write_rds(DF.l.full.inc, "data/processed/DF.l.full.inc.rds")
write_rds(DF.l, "data/processed/DF.l.rds")
write_rds(DF.l.inc, "data/processed/DF.l.inc.rds")
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
names(DF.l.inc)
DF.l$awareness.c %>% mean()
DF.l$awareness.c %>% mean(na.rm = T)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
# descriptives for full sample
desc.1 <- DF.w %>%
group_by(country) %>%
summarise(t.n = n(),
t.m.age = mean(indiv_agee_var,
na.rm = T),
t.sd.age = sd(indiv_agee_var,
na.rm = T),
t.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
t.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
t.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dev = mean(inc.dev),
inc.awa = sum(inc.awa, na.rm = T) / n(),
inc.dis = sum(inc.dis, na.rm = T) / n()
)
# descriptives for subset that met inclusion criteria
desc.2 <- DF.w %>%
filter(inc == 1,
inc.awa == 1) %>%
group_by(country) %>%
summarise(i.n = n(),
i.m.age = mean(indiv_agee_var,
na.rm = T),
i.sd.age = sd(indiv_agee_var,
na.rm = T),
i.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
i.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
i.other = sum(indiv_gend_var == 3, na.rm = T) / n()
)
# merge descriptives
desc = full_join(desc.1, desc.2, by = 'country')
rm(desc.1, desc.2)
# clean table
desc <- desc %>%
# round values
mutate_if(is.numeric,
funs(round(x = .,
digits = 2)
)
) %>%
# create age text
mutate(t.m.age = paste0(t.m.age,
" (", t.sd.age, ")"),
i.m.age = paste0(i.m.age,
" (", i.m.age, ")")
) %>%
# create gender text
mutate(t.women = paste0(t.women, "; ",
t.men, "; ",
t.other),
i.women = paste0(i.women, "; ",
i.men, "; ",
i.other)) %>%
# delete vestigial
select(-c(t.sd.age, t.men, t.other,
i.sd.age, i.men, i.other))
# export table
write.csv(desc, "desc.csv")
# Chunk 4
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# inclusion criteria
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# Chunk 5
models <- list()
# Chunk 6
# fit model
models[["primary"]][["prereg.min"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l.inc)
# inspect results
summary(models[["primary"]][["prereg.min"]])
anova(models[["primary"]][["prereg.min"]])
joint_tests(models[["primary"]][["prereg.min"]],
by = "condition",
lmerTest.limit = 9999)
joint_tests(models[["primary"]][["prereg.min"]],
by = c("image", "condition"),
lmerTest.limit = 9999)
# descriptives
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ image | condition,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ trial | condition,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ trial | image |condition,
adjust = "none")
# Chunk 7
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l.inc,
subset = condition != "pentask") %>%
anova()
# Chunk 9
# fit model
models[["primary"]][["full.sens"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l)
# inspect results
summary(models[["primary"]][["full.sens"]])
anova(models[["primary"]][["full.sens"]])
joint_tests(models[["primary"]][["full.sens"]],
by = "condition",
lmerTest.limit = c)
joint_tests(models[["primary"]][["full.sens"]],
by = "condition",
lmerTest.limit = full.sens)
joint_tests(models[["primary"]][["full.sens"]],
by = c("image", "condition"),
lmerTest.limit = full.sens)
# Chunk 10
# fit model
models[["secondary"]][["alt.exp"]] <-
lmer(happiness ~ trial * condition * image +
(1 | lab) +
(1 | ResponseId),
data = DF.l.full.inc)
# inspect results
anova(models[["secondary"]][["alt.exp"]])
joint_tests(models[["secondary"]][["alt.exp"]],
by = "image",
lmerTest.limit = 9999)
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial | condition | image,
adjust = "none")
# Chunk 12
# fit model
models[["secondary"]][["anxiety"]] <-
lmer(anxiety ~ trial * image * condition +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
anova(models[["secondary"]][["anxiety"]])
# Chunk 13
# fit model
models[["secondary"]][["anger"]] <-
lmer(anger ~ trial * image * condition +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
anova(models[["secondary"]][["anger"]])
# Chunk 14
DF.l %>%
group_by(condition) %>%
summarise(m.anx = mean(anxiety),
sd.anx = sd(anxiety),
m.ang = mean(anger),
sd.ang = sd(anger))
DF.l %>%
group_by(trial) %>%
summarise(m.anx = mean(anxiety),
sd.anx = sd(anxiety),
m.ang = mean(anger),
sd.ang = sd(anger))
# Chunk 15
# fit model
models[["secondary"]][["quality.rating"]] <-
lmer(happiness ~
trial * condition * image * qulty_rate_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
anova(models[["secondary"]][["quality.rating"]])
# Chunk 16
# mimicry
m <- lmer(happiness ~
trial * image * qulty_rate_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "mimicry")
m %>% anova()
m %>% summary()
m %>% confint()
# voluntary facial action task
m <- lmer(happiness ~
trial * image * qulty_rate_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "directd")
m %>% anova()
m %>% summary()
m %>% confint()
# pen-in-mouth
m <- lmer(happiness ~
trial * image * qulty_rate_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "pentask")
m %>% anova()
m %>% summary()
m %>% confint()
rm(m)
# Chunk 17
# fit simpler model without centered variable for ease of interpretation
tmp <- lmer(happiness ~
trial * condition * qulty_rate_var +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# five is where there is a switch (except for pen, which requires a 6)
lapply(X = c(1 : 7),
function(x){
emmeans(tmp,
pairwise ~ trial | condition,
at = list(qulty_rate_var = x))
}
)
# delete vestigial
rm(tmp)
# Chunk 18
# fit model
models[["secondary"]][["simil.rating"]] <-
lmer(happiness ~
trial * condition * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
anova(models[["secondary"]][["simil.rating"]])
# Chunk 19
# mimicry
m <- lmer(happiness ~
trial * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "mimicry")
m %>% anova()
m %>% summary()
m %>% confint()
# voluntary facial action task
m <- lmer(happiness ~
trial * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "directd")
m %>% anova()
m %>% summary()
m %>% confint()
# pen-in-mouth
m <- lmer(happiness ~
trial * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "pentask")
m %>% anova()
m %>% summary()
m %>% confint()
rm(m)
# Chunk 20
# fit simpler model without centered variable for ease of interpretation
tmp <- lmer(happiness ~
trial * condition * qulty_smlr_var +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# 2 is where there is a switch (for all besides mimicry, which requires a 3)
lapply(X = c(1 : 7),
function(x){
emmeans(tmp,
pairwise ~ trial | condition,
at = list(qulty_smlr_var = x))
}
)
# delete vestigial
rm(tmp)
# Chunk 21
# fit model
models[["secondary"]][["feel.rating"]] <-
lmer(happiness ~
trial * condition * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
anova(models[["secondary"]][["feel.rating"]])
# Chunk 22
# facial mimicry
m <- lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "mimicry")
m %>% anova()
m %>% summary()
m %>% confint()
# voluntary facial action task
m <- lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "directd")
m %>% anova()
m %>% summary()
m %>% confint()
# pen-in-mouth
m <- lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "pentask")
m %>% anova()
m %>% summary()
m %>% confint()
rm(m)
# Chunk 23
# fit simpler model without centered variable for ease of interpretation
tmp <- lmer(happiness ~
trial * condition * qulty_feel_var +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# 2 is when it switches over (for all conditions)
lapply(X = c(1 : 7),
function(x){
emmeans(tmp,
pairwise ~ trial | condition,
at = list(qulty_feel_var = x))
}
)
# delete vestigial
rm(tmp)
# fit model
models[["secondary"]][["awareness"]] <-
lmer(happiness ~
trial * condition * image *  awareness.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
anova(models[["secondary"]][["awareness"]])
lmer(happiness ~ trial * awareness.c * qulty_feel_var.c +
(1 | ResponseId) +
(1 | lab),
data = DF.l)
lmer(happiness ~ trial * awareness.c * qulty_feel_var.c +
(1 | ResponseId) +
(1 | lab),
data = DF.l) %>% summary()
cor.test(DF.w$awareness, DF.w$qulty_rate_var)
