)
meta.p <- rma(
yi = d,
vi = d.var,
slab = country,
data = meta.DF,
subset = condition == "pentask"
)
meta.i <- rma(
yi = d,
vi = d.var,
slab = country,
data = meta.DF,
subset = condition == "image"
)
meta.i <- rma(
yi = d,
vi = d.var,
slab = country,
data = meta.DF,
subset = condition == "image"
)
meta.i
meta.DF <- meta.DF %>%
mutate(Q = NA,
Q.p = NA,
i2 = NA,
t2 = NA)
meta.DF <- rbind(
meta.DF,
# mimicry
cbind(
condition = "mimicry",
country = "Overall",
d = meta.m[["beta"]] %>%
as.numeric(),
d.var = meta.m[["se"]] ^ 2,
lb = meta.m[["ci.lb"]],
ub = meta.m[["ci.ub"]],
Q = round(meta.m$QE, 2),
Q.p = round(meta.m$QEp, 3),
i2 = round(meta.m$I2, 0),
t2 = round(meta.m$tau2, 2)
),
# directd
cbind(
condition = "directd",
country = "Overall",
d = meta.d[["beta"]] %>%
as.numeric(),
d.var = meta.d[["se"]] ^ 2,
lb = meta.d[["ci.lb"]],
ub = meta.d[["ci.ub"]],
Q = round(meta.d$QE, 2),
Q.p = round(meta.d$QEp, 3),
i2 = round(meta.d$I2, 0),
t2 = round(meta.d$tau2, 2)
),
# pentask
cbind(
condition = "pentask",
country = "Overall",
d = meta.p[["beta"]] %>%
as.numeric(),
d.var = meta.p[["se"]] ^ 2,
lb = meta.p[["ci.lb"]],
ub = meta.p[["ci.ub"]],
Q = round(meta.p$QE, 2),
Q.p = round(meta.p$QEp, 3),
i2 = round(meta.p$I2, 0),
t2 = round(meta.p$tau2, 2)
),
# image
cbind(
condition = "image",
country = "Overall",
d = meta.i[["beta"]] %>%
as.numeric(),
d.var = meta.i[["se"]] ^ 2,
lb = meta.i[["ci.lb"]],
ub = meta.i[["ci.ub"]],
Q = round(meta.i$QE, 2),
Q.p = round(meta.i$QEp, 3),
i2 = round(meta.i$I2, 0),
t2 = round(meta.i$tau2, 2)
)
) %>% as.data.frame()
rm(meta.d, meta.m, meta.p, meta.i)
meta.DF <- meta.DF %>%
mutate(
# identify which effects are overall vs. country-specific
overall = if_else(condition = country == "Overall",
true = 1,
false = 0),
# order effect sizes by whether they are (a) overall vs. country-specific and then (b) size of the effect
country = fct_reorder(country,
desc(d)),
country = fct_reorder(country,
desc(overall)),
# fix format of numeric variables
d = as.numeric(d),
lb = as.numeric(lb),
ub = as.numeric(ub),
# relevel and recode condition variable
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask",
"image")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth",
image = "exposure to positive images"))
png(filename = "figures/Figure5.png",
units = "in",
width = 9,
height = 5.07,
res = 300)
ggplot(data = meta.DF,
aes(x = country,
y = d,
ymin = lb,
ymax = ub)) +
geom_rect(aes(fill = condition),
xmin = -Inf, xmax = Inf,
ymin = -Inf, ymax = Inf,
alpha = 0.3) +
geom_hline(yintercept = 0,
color = "black",
linetype = "dashed",
alpha = .5) +
geom_point(aes(shape = as.factor(overall),
size = as.factor(overall),
colour = as.factor(overall))) +
geom_errorbar(width = .5,
aes(colour = as.factor(overall))) +
scale_shape_manual(values = c(15, 18)) +
scale_size_manual(values = c(2, 4)) +
scale_color_manual(values= c("dark grey",
"#3366FF")) +
scale_fill_manual(values = c("white",
"white",
"white",
"ivory2")) +
coord_flip() +
facet_grid(cols = vars(condition)) +
labs(y = expression(paste("Cohen's ",
italic("d"))
),
x = "Country") +
ylim(-1.5, 1.3) +
geom_richtext(data = meta.DF[meta.DF$overall == 1, ],
aes(label = paste0("overall <i>d</i> = ", round(d, 2),
" [", round(lb, 2), ", ",
round(ub, 2), "]",
"<br>",
" Q = ", Q, ", <i>p</i> < .005",
"<br>",
" <i>I<sup>2</sup></i> = ", i2, "%",
", <i>T<sup>2</sup></i> = ", t2),
x = 1.18,
y = -1.5),
size = 1.8,
label.colour = NA,
fill = NA,
hjust = 0)
dev.off()
png(filename = "figures/Figure5.png",
units = "in",
width = 9,
height = 5.07,
res = 300)
ggplot(data = meta.DF,
aes(x = country,
y = d,
ymin = lb,
ymax = ub)) +
geom_rect(aes(fill = condition),
xmin = -Inf, xmax = Inf,
ymin = -Inf, ymax = Inf,
alpha = 0.3) +
geom_hline(yintercept = 0,
color = "black",
linetype = "dashed",
alpha = .5) +
geom_point(aes(shape = as.factor(overall),
size = as.factor(overall),
colour = as.factor(overall))) +
geom_errorbar(width = .5,
aes(colour = as.factor(overall))) +
scale_shape_manual(values = c(15, 18)) +
scale_size_manual(values = c(2, 4)) +
scale_color_manual(values= c("dark grey",
"#3366FF")) +
scale_fill_manual(values = c("white",
"white",
"white",
"ivory2")) +
coord_flip() +
facet_grid(cols = vars(condition)) +
labs(y = expression(paste("Cohen's ",
italic("d"))
),
x = "Country") +
ylim(-1.5, 1.3) +
geom_richtext(data = meta.DF[meta.DF$overall == 1, ],
aes(label = paste0("overall <i>d</i> = ", round(d, 2),
" [", round(lb, 2), ", ",
round(ub, 2), "]",
"<br>",
" Q = ", Q, ", <i>p</i> < .005",
"<br>",
" <i>I<sup>2</sup></i> = ", i2, "%",
", <i>T<sup>2</sup></i> = ", t2),
x = 1.18,
y = -1.5),
size = 1.8,
label.colour = NA,
fill = NA,
hjust = 0)
dev.off()
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background =
element_rect(fill = "gray35"),
strip.text =
element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/DF.w.rds")
DF.l.full <- readRDS("data/DF.l.full.rds")
DF.l <- readRDS("data/DF.l.rds")
DF.l.inc <- readRDS("data/DF.l.inc.rds")
# Chunk 3
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# gender
table(DF.l$indiv_gend_var) %>% prop.table()
# age
DF.w %>%
summarise(m = mean(indiv_agee_var,
na.rm = T),
sd = sd(indiv_agee_var,
na.rm = T))
# Chunk 4
models <- list()
anova(models[["secondary"]][["anxiety"]])
emmeans(models[["secondary"]][["anxiety"]],
pairwise ~ trial ,
adjust = "none")
emmeans(models[["secondary"]][["anxiety"]],
pairwise ~ condition,
adjust = "none")
emmeans(models[["secondary"]][["anxiety"]],
pairwise ~ trial | condition,
adjust = "none")
models[["secondary"]][["anxiety"]] <-
lmer(anxiety ~ trial * image * condition +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
anova(models[["secondary"]][["anxiety"]])
emmeans(models[["secondary"]][["anxiety"]],
pairwise ~ condition,
adjust = "none")
anova(models[["secondary"]][["anxiety"]])
models[["secondary"]][["anger"]] <-
lmer(anger ~ trial * image * condition +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
anova(models[["secondary"]][["anger"]])
emmeans(models[["secondary"]][["anger"]],
pairwise ~ condition,
adjust = "none")
emmeans(models[["secondary"]][["anxiety"]],
pairwise ~ condition,
adjust = "none")
DF.l %>%
group_by(condition) %>%
summarise(m.anx = mean(anxiety),
sd.anx = sd(anxiety),
m.ang = mean(anger),
sd.ang = sd(anger))
tmp <- DF.l %>%
group_by(condition) %>%
summarise(m.anx = mean(anxiety),
sd.anx = sd(anxiety)
)
View(tmp)
?pivot_wider
tmp <- DF.l %>%
group_by(condition) %>%
summarise(m.anx = mean(anxiety),
sd.anx = sd(anxiety)) %>%
pivot_wider(names_from = condition,
values_from = c(m.anx, sd.anx))
View(tmp)
?if_else
DF.l$condition %>% names()
DF.l$condition %>% levels()
tmp <- DF.l %>%
# recode condition
mutate(condition_p.v.no.p =
if_else(condition = condition == "pentask",
true = 1,
false = 0)) %>%
# calculate group M and SD
group_by(condition_p.v.no.p) %>%
summarise(m.anx = mean(anxiety),
sd.anx = sd(anxiety)) %>%
pivot_wider(names_from = condition,
values_from = c(m.anx, sd.anx))
tmp <- DF.l %>%
# recode condition
mutate(condition_p.v.no.p =
if_else(condition = condition == "pentask",
true = 1,
false = 0))
View(tmp)
DF.l %>%
# recode condition
mutate(condition_p.v.no.p =
if_else(condition = condition == "pentask",
true = 1,
false = 0)) %>%
# calculate group M and SD
group_by(condition_p.v.no.p) %>%
summarise(m.anx = mean(anxiety),
sd.anx = sd(anxiety))
tmp <- DF.l %>%
# recode condition
mutate(condition_p.v.no.p =
if_else(condition = condition == "pentask",
true = 1,
false = 0)) %>%
# calculate group M and SD
group_by(condition_p.v.no.p) %>%
summarise(m.anx = mean(anxiety),
sd.anx = sd(anxiety)) %>%
pivot_wider(names_from = condition_p.v.no.p,
values_from = c(m.anx, sd.anx))
View(tmp)
tmp <- DF.l %>%
# recode condition
mutate(condition_p.v.no.p =
if_else(condition = condition == "pentask",
true = 1,
false = 0)) %>%
# calculate group M and SD
group_by(condition_p.v.no.p) %>%
summarise(n = n(),
m.anx = mean(anxiety),
sd.anx = sd(anxiety)) %>%
pivot_wider(names_from = condition_p.v.no.p,
values_from = c(n, m.anx, sd.anx))
View(tmp)
tmp <- DF.l %>%
# recode condition
mutate(condition_p.v.no.p =
if_else(condition = condition == "pentask",
true = 1,
false = 0)) %>%
# calculate group M and SD
group_by(condition_p.v.no.p) %>%
summarise(n = n(),
m = mean(anxiety),
sd = sd(anxiety)) %>%
pivot_wider(names_from = condition_p.v.no.p,
values_from = c(n, m, sd))
View(tmp)
tmp <- DF.l %>%
# recode condition
mutate(condition_p.v.no.p =
if_else(condition = condition == "pentask",
true = 1,
false = 0)) %>%
# calculate group M and SD
group_by(condition_p.v.no.p) %>%
summarise(n = n(),
m = mean(anxiety),
sd = sd(anxiety)) %>%
pivot_wider(names_from = condition_p.v.no.p,
values_from = c(n, m, sd)) %>%
# calculate effect size
mutate(sd.pooled = sqrt((((n_1 - 1) * (sd_1^2)) +
((n_2 - 1) * (sd_2^2))) /
(n_1 + n_2 - 2))) %>%
mutate(d = (m_1 - m2) / sd.pooled)
tmp <- DF.l %>%
# recode condition
mutate(condition_p.v.no.p =
if_else(condition = condition == "pentask",
true = 1,
false = 0)) %>%
# calculate group M and SD
group_by(condition_p.v.no.p) %>%
summarise(n = n(),
m = mean(anxiety),
sd = sd(anxiety)) %>%
pivot_wider(names_from = condition_p.v.no.p,
values_from = c(n, m, sd)) %>%
# calculate effect size
mutate(sd.pooled = sqrt((((n_0 - 1) * (sd_0^2)) +
((n_1 - 1) * (sd_1^2))) /
(n_0 + n_1 - 2))) %>%
mutate(d = (m_0 - m_1) / sd.pooled)
View(tmp)
tmp <- DF.l %>%
# recode condition
mutate(condition_p.v.no.p =
if_else(condition = condition == "pentask",
true = 1,
false = 0)) %>%
# calculate group M and SD
group_by(condition_p.v.no.p) %>%
summarise(n = n(),
m = mean(anxiety),
sd = sd(anxiety)) %>%
pivot_wider(names_from = condition_p.v.no.p,
values_from = c(n, m, sd)) %>%
# calculate effect size
mutate(sd.pooled = sqrt((((n_1 - 1) * (sd_1^2)) +
((n_0 - 1) * (sd_0^2))) /
(n_1 + n_0 - 2))) %>%
mutate(d = (m_1 - m_0) / sd.pooled)
DF.l %>%
# recode condition
mutate(condition_p.v.no.p =
if_else(condition = condition == "pentask",
true = 1,
false = 0)) %>%
# calculate group M and SD
group_by(condition_p.v.no.p) %>%
summarise(n = n(),
m = mean(anxiety),
sd = sd(anxiety)) %>%
pivot_wider(names_from = condition_p.v.no.p,
values_from = c(n, m, sd)) %>%
# calculate effect size
mutate(sd.pooled = sqrt((((n_1 - 1) * (sd_1^2)) +
((n_0 - 1) * (sd_0^2))) /
(n_1 + n_0 - 2))) %>%
mutate(d = (m_1 - m_0) / sd.pooled) %>%
select(d) %>%
print()
models[["primary"]][["full"]] <-
lmer(happiness ~ trial * condition * image +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
```{r}
anova(models[["primary"]][["full"]])
joint_tests(models[["primary"]][["full"]],
by = "condition",
lmerTest.limit = 10000)
(40-2)/40
38/50
38/70
39/70
(8-1)/2
(8-1)/5
(8-1)/6
(8-1)/1
(8-1)/2
38/40
4.5/3
49.5/30
49.5/50
4.5/3
45/30
.5/3
.5/2
1/20
