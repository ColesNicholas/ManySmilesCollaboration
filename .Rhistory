lab != "USA_03") %>%
mutate(lab = factor(lab))
tmp$lab %>% unique()
tmp <- DF %>%
filter(lab != "AUS_01",
lab != "BRA_01",
lab != "CHE_01",
#lab != "COL_02",
lab != "COL_03",
lab != "DEU_01",
lab != "ESP_01",
lab != "FRA_01",
lab != "FRA_02",
lab != "GBR_01",
lab != "HUN_01",
lab != "IND_01",
lab != "ISR_01",
lab != "ITA_01",
#lab != "JPN_01",
#lab != "KEN_01",
lab != "NGA_01",
lab != "NOR_01",
lab != "POL_01",
lab != "USA_01",
lab != "TUR_01",
lab != "POL_02",
lab != "USA_03",
lab != "USA_04") %>%
mutate(lab = factor(lab))
tmp$lab %>% unique()
lmer(happiness ~ trial + (1 | lab),
data = tmp)
tmp <- DF %>%
filter(lab != "AUS_01",
lab != "BRA_01",
lab != "CHE_01",
#lab != "COL_02",
lab != "COL_03",
lab != "DEU_01",
lab != "ESP_01",
lab != "FRA_01",
lab != "FRA_02",
lab != "GBR_01",
lab != "HUN_01",
lab != "IND_01",
lab != "ISR_01",
lab != "ITA_01",
#lab != "JPN_01",
#lab != "KEN_01",
lab != "NGA_01",
lab != "NOR_01",
lab != "POL_01",
lab != "USA_01",
lab != "TUR_01",
lab != "POL_02",
lab != "USA_03",
lab != "USA_04",
lab != "TUR_02") %>%
mutate(lab = factor(lab))
tmp$lab %>% unique()
lmer(happiness ~ trial + (1 | lab),
data = tmp)
tmp <- DF %>%
filter(lab != "AUS_01",
lab != "BRA_01",
lab != "CHE_01",
#lab != "COL_02",
lab != "COL_03",
lab != "DEU_01",
lab != "ESP_01",
lab != "FRA_01",
lab != "FRA_02",
lab != "GBR_01",
lab != "HUN_01",
lab != "IND_01",
lab != "ISR_01",
lab != "ITA_01",
#lab != "JPN_01",
#lab != "KEN_01",
lab != "NGA_01",
lab != "NOR_01",
lab != "POL_01",
lab != "USA_01",
lab != "TUR_01",
lab != "POL_02",
lab != "USA_03",
lab != "USA_04",
lab != "TUR_02",
lab != "USA_02") %>%
mutate(lab = factor(lab))
tmp$lab %>% unique()
lmer(happiness ~ trial + (1 | lab),
data = tmp)
tmp$ResponseId %>% unique()
tmp$ResponseId factor() %>% unique()
tmp$ResponseId %>% factor() %>% unique()
tmp$lab %>% unique()
ggplot(data = tmp,
aes(x = target,
y = Intensity,
colour =color)) +
facet_grid(rows = vars(EmotionReport),
cols = vars(induct)) +
# jitter raw data points
geom_jitter(width = .1,
alpha = .2,
color = "grey80") + #
# # connect raw data points
# geom_line(alpha = .2,
#           aes(group = ResponseId),
#           color = "grey80") +
# add summary slope
stat_summary(geom = "line",
colour = "#00998a", #
size = 1,
aes(group = 1)) +
# add summary error bars
stat_summary(colour = "#00998a",
size = 1,
width = 1,
fun.data = mean_se,
geom = "errorbar") +
# labels
xlab('targeted emotion') +
ylab('intensity') +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust=1))
# Chunk 1: setup and load packages
# clear R environment
rm(list = ls())
# load libraries
library("tidyverse")
library("psych")
library("lme4")
library("lmerTest")
library("emmeans")
# turn scientific notation off
options(scipen = 999)
# set seed to year of Nicholas' favorite [unfinished] album, SMiLE
set.seed(1967)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set theme
theme_set(theme_classic())
# Chunk 2: open/clean data
DF <-
# open data
read.csv(file = "data/epic23b_data_RawNoId.csv") %>%
# remove data from participants who quit the study before seeing the first emotion induction
# Note: the cut-off was determined via manual inspection
filter(Progress > 6) %>%
# select variables of interest
select(
# participants/study info
ResponseId, REGION, induct,
# emotion reports
contains(c("_hap_", "_fea", "_ang_", "_sad_")),
# demographics
indiv_gend_var,
indiv_agee_var,
# completion, attention check, suspicion check
Progress, metaa_data_que_Operating.System,
intro_filt, mck, quali_chek_que,
susp_chk,
# remove timing variables
-contains("tme")
) %>%
# create separate rows for every emotion report
pivot_longer(cols = sad_img_hap_01 : neu_vig_sad_03) %>%
# extract target emotion, induction type, and outcome
separate(col = name,
into = c("target", "induction", "outcome"),
sep = c(4, 8)) %>%
# remove rows where we do not expect there to be data
# e.g., if participant was assigned to view images, they should have no reports for the gpt emotion self-report
filter(induct == substr(x = induction,
start = 1,
stop = 3)) %>%
# convert value to numeric
mutate(value = as.numeric(value)) %>%
# pivot emotion items to cols
pivot_wider(names_from = outcome,
values_from = value)
# Chunk 3
library("corrplot")
library("lavaan")
library("semTools")
#
# DF.wider <- DF %>%
#   pivot_wider(names_from = EmotionReport,
#               values_from = Intensity)
DF <- DF %>%
rowwise() %>%
mutate(REGION = if_else(is.na(REGION),
true = "NoA",
false = REGION),
REGION = as.factor(REGION)) %>%
ungroup()
cormat <- DF %>%
select(hap_01 : sad_03) %>%
cor(use = "pairwise.complete.obs")
corrplot(cormat,
order = "hclust",
addrect = 4)
# Four-factor CFA model
model <- 'hap =~ hap_01 + hap_02 + hap_03
ang =~ ang_01 + ang_02 + ang_03
sad =~ sad_01 + sad_02 + sad_03
fea =~ fea_01 + fea_02 + fea_03
hap ~~ ang + sad + fea
ang ~~ sad + fea
sad ~~ fea'
# configural invariance
cfa.config <- cfa(model,
data = DF,
group = "REGION")
## EXCELLENT CFI and RMSEA scores
summary(cfa.config, fit.measures = TRUE, standardized = TRUE)
# metric invariance
cfa.metric <- cfa(model,
data = DF,
group = "REGION",
group.equal = "loadings")
## good CFI and mediocre RMSEA scores; better BIC worse AIC; models are approximately
summary(cfa.metric, fit.measures = TRUE, standardized = TRUE)
anova(cfa.metric, cfa.config)
library('lavaanPlot')
# Chunk 4
# happiness subscale internal reliability (alpha = .96 w/ full data)
psych::alpha(x = select(DF, hap_01 : hap_03))
# fear subscale internal reliability (alpha = .92 w/ full data)
psych::alpha(x = select(DF, fea_01 : fea_03))
# anger subscale internal reliability (alpha = .90 w/ full data)
psych::alpha(x = select(DF, ang_01 : ang_03))
# sadness subscale internal reliability (alpha = .95 w/ full data)
psych::alpha(x = select(DF, sad_01 : sad_03))
# create subscales and remove items
DF <- DF %>%
rowwise() %>%
mutate(hap = mean(c(hap_01, hap_02, hap_03)),
fea = mean(c(fea_01, fea_02, fea_03)),
ang = mean(c(ang_01, ang_02, ang_03)),
sad = mean(c(sad_01, sad_02, sad_03))) %>%
ungroup() %>%
select(-c(hap_01: sad_03))
# pivot longer
DF <- DF %>%
pivot_longer(cols = hap: sad,
names_to = "EmotionReport",
values_to = "Intensity")
# (for now) select only the variables we need
# also fix variable classes
DF <- DF %>%
select(ResponseId, REGION, induct, target, induction, EmotionReport, Intensity) %>%
mutate_at(.vars = vars(ResponseId, REGION, induct, target, induction, EmotionReport),
.funs = as.factor)
# Chunk 5
q1.m <- lmer(Intensity ~ EmotionReport * target + (1 | ResponseId),
data = DF)
summary(q1.m)
anova(q1.m)
emmeans(q1.m, pairwise ~ EmotionReport | target)
emmeans(q1.m, pairwise ~ target | EmotionReport)
rm(q1.m)
# Chunk 6
ggplot(data = DF,
aes(x = target,
y = Intensity)) +
facet_grid(rows = vars(EmotionReport)) +
# jitter raw data points
geom_jitter(width = .1,
alpha = .075) +
# connect raw data points
geom_line(alpha = .075,
aes(group = ResponseId)) +
# add summary slope
stat_summary(geom = "line",
colour = "black",
size = 1,
aes(group = 1))
# Chunk 7
q2.m <- lmer(Intensity ~ EmotionReport * target * induction +
(1 | ResponseId),
data = DF)
summary(q2.m)
anova(q2.m)
emmeans(q2.m, pairwise ~ EmotionReport | target | induction)
emmeans(q2.m, pairwise ~ target | EmotionReport | induction)
rm(q2.m)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
models <- list()
# models <- readRDS("output/analyses/freq.models.Rds")
rm(models)
m1 <- lmer(happiness ~ trial + image +
(1 | lab) +
(1 | ResponseId) +
(0 + trial | lab) + (0 + image | lab),
data = DF.l.inc)
m1
summary(m1)
DF.l.inc$country %>% table()
DF.l.inc$lab %>% table()
m1 <- lmer(happiness ~ trial + image +
(1 | country) +
(1 | ResponseId) +
(0 + trial | country) + (0 + image | country),
data = DF.l.inc)
summary(m1)
m1 <- lmer(happiness ~ trial + image +
(1 trial + image | country) +
(1 | ResponseId),
data = DF.l.inc)
m1 <- lmer(happiness ~ trial + image +
(1 + trial + image | country) +
(1 | ResponseId),
data = DF.l.inc)
summary(m1)
m1 <- lmer(happiness ~ trial + image +
(1 + image | country) +
(1 | ResponseId),
data = DF.l.inc)
m2 <- lmer(happiness ~ trial + image +
(1 + trial + image | country) +
(1 | ResponseId),
data = DF.l.inc)
install.packages('multilevelTools')
library('multilevelTools')
modelCompare(m1, m2)
modelCompare.merMod(m1, m2)
?modelCompare.merMod
library('multilevelTools')
modelCompare.merMod(m1, m2)
multilevelTools::modelCompare.merMod(m1, m2)
modelCompare(m1, m2)
library(lmerTest)
summary(m2)
models <- readRDS("output/analyses/freq.models.Rds")
summary(m2)
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
models <- readRDS("output/analyses/freq.models.Rds")
summary(m2)
summary(models[["primary"]][["prereg"]])
m1 <- lmer(happiness ~ trial +
(1 + trial | country) +
(1 | ResponseId),
data = DF.l.inc)
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
m1 <- lmer(happiness ~ trial +
(1 + trial | country) +
(1 | ResponseId),
data = DF.l.inc)
summary(m1)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
readRDS("output/analyses/freq.models.Rds")
summary(models[["primary"]][["prereg"]])
getwd
getwd()
models <- readRDS("output/analyses/freq.models.Rds")
summary(models[["primary"]][["prereg"]])
ggplot(NULL, aes(c(-1, 1))) +
geom_area(stat = "function",
fun = dnorm,
args = list(mean = 0.13953, sd = 0.00061794),
fill = "sky blue")
ggplot(NULL, aes(c(-1, 1))) +
geom_area(stat = "function",
fun = dnorm,
args = list(mean = 0.13953, sd = .25),
fill = "sky blue") +
ylab("") +
scale_y_continuous(breaks = NULL) +
xlab("Pose effects across countries (d)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(NULL, aes(c(-1, 1))) +
geom_area(stat = "function",
fun = dnorm,
args = list(mean = 0.13953, sd = 0.00061794),
fill = "sky blue") +
ylab("") +
scale_y_continuous(breaks = NULL) +
xlab("Pose effects across countries (d)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
lmer(happiness ~ trial * condition * image +
(1 | lab) + (1 | ResponseId),
data = DF.l.inc) %>% summary()
options(contrasts = c('contr.sum', 'contr.poly'))
lmer(happiness ~ trial * condition * image +
(1 | lab) + (1 | ResponseId),
data = DF.l.inc) %>% summary()
