)
ggline(DF.l.full.inc,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco")
DF.l$trial %>% unique()
View(DF.l.full)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'ggtext', 'metafor')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
View(DF.l.inc)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'ggtext', 'metafor')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
DF.l$trial %>% unique()
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'ggtext', 'metafor')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
DF.l <- DF.l %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 4
DF.l.full <- DF.l.full %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 5
DF.l.inc <- DF.l.inc %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
f4.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1)
ggline(f4.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco")
f4.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
trial = recode(trial,
`filler 1` = "filler",
`filler 2` = "filler")
f4.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
mutate(trial = recode(trial,
`filler 1` = "filler",
`filler 2` = "filler"))
f4.DF$trial %>% unique()
ggline(f4.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco")
tmp <-
DF.l %>%
filter(condition == "mimicry") %>%
mutate(trial.n = as.numeric(trial) * (-1) + 2)
m <- lmer(happiness ~
trial.n * qulty_rate_var +
(1 | lab) +
(1 | ResponseId),
data = tmp)
summary(m)
johnson_neyman(model = m,
pred = trial.n,
modx = qulty_rate_var)
library(interactions)
tmp <-
DF.l %>%
filter(condition == "mimicry") %>%
mutate(trial.n = as.numeric(trial) * (-1) + 2)
m <- lmer(happiness ~
trial.n * qulty_rate_var +
(1 | lab) +
(1 | ResponseId),
data = tmp)
summary(m)
johnson_neyman(model = m,
pred = trial.n,
modx = qulty_rate_var)
tmp <-
DF.l %>%
filter(condition == "facial.mimicry") %>%
mutate(trial.n = as.numeric(trial) * (-1) + 2)
m <- lmer(happiness ~
trial.n * qulty_rate_var +
(1 | lab) +
(1 | ResponseId),
data = tmp)
lmer(happiness ~
trial.n * qulty_rate_var +
(1 | lab) +
(1 | ResponseId),
data = tmp)
tmp$lab %>% class()
tmp <-
DF.l %>%
filter(condition == "facial.mimicry") %>%
mutate(trial.n = as.numeric(trial) * (-1) + 2,
lab = factor(lab))
m <- lmer(happiness ~
trial.n * qulty_rate_var +
(1 | lab) +
(1 | ResponseId),
data = tmp)
library(lme4)
m <- lmer(happiness ~
trial.n * qulty_rate_var +
(1 | lab) +
(1 | ResponseId),
data = tmp)
tmp$trial.n
tmp <-
DF.l %>%
filter(condition == "facial mimicry") %>%
mutate(trial.n = as.numeric(trial) * (-1) + 2)
m <- lmer(happiness ~
trial.n * qulty_rate_var +
(1 | lab) +
(1 | ResponseId),
data = tmp)
summary(m)
johnson_neyman(model = m,
pred = trial.n,
modx = qulty_rate_var)
?johnson_neyman
f5.DF <- DF.l %>%
# select relevant variables
select(ResponseId, trial, condition,
happiness, qulty_rate_var,
qulty_feel_var, qulty_smlr_var) %>%
# calculate a difference score between the happy and neutral posesâ˜º
pivot_wider(names_from = trial,
values_from = happiness) %>%
rowwise() %>%
mutate(happ.diff = happy - neutral) %>%
ungroup() %>%
# pivot longer so that there is one row for each moderator
pivot_longer(cols = c(qulty_rate_var,
qulty_smlr_var,
qulty_feel_var,
),
names_to = "mod") %>%
# relevel factors
mutate(mod = factor(mod,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
mod = recode(mod,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity"))
f5.DF$sig.cross = as.numeric(NA)
f5.DF$mode = as.numeric(NA)
# compliance
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "compliance", ]$sig.cross <- 5
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "compliance", ]$mode <- 7
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "compliance", ]$sig.cross <- 5
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "compliance", ]$mode <- 7
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "compliance", ]$sig.cross <- 6
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DFz$mod == "compliance", ]$mode <- 7
# similarity
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "similarity", ]$sig.cross <- 3
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "similarity", ]$mode <- 6
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "similarity", ]$sig.cross <- 2
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "similarity", ]$mode <- 7
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "similarity", ]$sig.cross <- 2
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "similarity", ]$mode <- 6
# genuineness
f5.DF[f5.DF$mod == "genuineness", ]$sig.cross <- 2
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "genuineness", ]$mode <- 5
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "genuineness", ]$mode <- 5
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "genuineness", ]$mode <- 1
X <- split(f5.DF, f5.DF$mod)
View(X)
View(X)
ggplot(X[1],
aes(x = value,
y = happ.diff)) +
facet_grid(cols = vars(condition)) +
geom_rect(aes(xmin = sig.cross - .25,
xmax = 7.25,
ymin = -6,
ymax = 6),
fill = "lightgreen",
alpha = .01) +
geom_rect(aes(xmin = mode - .25,
xmax = mode + .25,
ymin = -6,
ymax = 6),
fill = NA,
colour = "black") +
geom_jitter(width = .1,
alpha = .2,
colour = "dark grey") +
geom_smooth(method = 'lm')
ggplot(as.data.frame(X[1]),
aes(x = value,
y = happ.diff))
as.data.frame(X[1])
as.data.frame(X[1]) %>% View()
X <- f5.DF %>%
group_split(mod)
View(X)
X[[1]]
ggplot(as.data.frame(X[[1]]),
aes(x = value,
y = happ.diff))
ggplot(as.data.frame(X[[1]]),
aes(x = value,
y = happ.diff)) +
facet_grid(cols = vars(condition)) +
geom_rect(aes(xmin = sig.cross - .25,
xmax = 7.25,
ymin = -6,
ymax = 6),
fill = "lightgreen",
alpha = .01) +
geom_rect(aes(xmin = mode - .25,
xmax = mode + .25,
ymin = -6,
ymax = 6),
fill = NA,
colour = "black") +
geom_jitter(width = .1,
alpha = .2,
colour = "dark grey") +
geom_smooth(method = 'lm')
ggplot(as.data.frame(X[[2]]),
aes(x = value,
y = happ.diff)) +
facet_grid(cols = vars(condition)) +
geom_rect(aes(xmin = sig.cross - .25,
xmax = 7.25,
ymin = -6,
ymax = 6),
fill = "lightgreen",
alpha = .01) +
geom_rect(aes(xmin = mode - .25,
xmax = mode + .25,
ymin = -6,
ymax = 6),
fill = NA,
colour = "black") +
geom_jitter(width = .1,
alpha = .2,
colour = "dark grey") +
geom_smooth(method = 'lm') +
xlab("Self-reported genuineness") +
ylab("Change in self-reported happiness") +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
f2 <- ggplot(as.data.frame(X[[2]]),
aes(x = value,
y = happ.diff)) +
facet_grid(cols = vars(condition)) +
geom_rect(aes(xmin = sig.cross - .25,
xmax = 7.25,
ymin = -6,
ymax = 6),
fill = "lightgreen",
alpha = .01) +
geom_rect(aes(xmin = mode - .25,
xmax = mode + .25,
ymin = -6,
ymax = 6),
fill = NA,
colour = "black") +
geom_jitter(width = .1,
alpha = .2,
colour = "dark grey") +
geom_smooth(method = 'lm') +
xlab("Self-reported genuineness") +
ylab("Change in self-reported happiness") +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
f3 <- ggplot(as.data.frame(X[[3]]),
aes(x = value,
y = happ.diff)) +
facet_grid(cols = vars(condition)) +
geom_rect(aes(xmin = sig.cross - .25,
xmax = 7.25,
ymin = -6,
ymax = 6),
fill = "lightgreen",
alpha = .01) +
geom_rect(aes(xmin = mode - .25,
xmax = mode + .25,
ymin = -6,
ymax = 6),
fill = NA,
colour = "black") +
geom_jitter(width = .1,
alpha = .2,
colour = "dark grey") +
geom_smooth(method = 'lm') +
xlab("Self-reported similarity") +
ylab("Change in self-reported happiness") +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
library("grid.arrange")
grid.arrange(f1, f2, f3,
nrow = 3)
library("gridExtra")
grid.arrange(f1, f2, f3,
nrow = 3)
f1 <- ggplot(as.data.frame(X[[1]]),
aes(x = value,
y = happ.diff)) +
facet_grid(cols = vars(condition)) +
geom_rect(aes(xmin = sig.cross - .25,
xmax = 7.25,
ymin = -6,
ymax = 6),
fill = "lightgreen",
alpha = .01) +
geom_rect(aes(xmin = mode - .25,
xmax = mode + .25,
ymin = -6,
ymax = 6),
fill = NA,
colour = "black") +
geom_jitter(width = .1,
alpha = .2,
colour = "dark grey") +
geom_smooth(method = 'lm') +
xlab("Self-reported compliance") +
ylab("Change in self-reported happiness") +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
grid.arrange(f1, f2, f3,
nrow = 3)
