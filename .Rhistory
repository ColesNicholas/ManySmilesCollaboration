lapply(X = c(1 : 7),
function(x){
emmeans(models[["secondary"]][["quality.rating"]],
pairwise ~ trial | condition,
at = list(qulty_rate_var = x))
}
)
tmp <- lmer(happiness ~
trial * condition * qulty_rate_var +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
lapply(X = c(1 : 7),
function(x){
emmeans(tmp,
pairwise ~ trial | condition,
at = list(qulty_rate_var = x))
}
)
# fit model
models[["secondary"]][["simil.rating"]] <-
lmer(happiness ~
trial * condition * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# fit model
models[["secondary"]][["simil.rating"]] <-
lmer(happiness ~
trial * condition * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
anova(models[["supplementary"]][["simil.rating"]])
lmer(happiness ~
trial * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "mimicry") %>%
anova()
lmer(happiness ~
trial * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "directd") %>%
anova()
lmer(happiness ~
trial * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "pentask") %>%
anova()
lmer(happiness ~
trial * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "pentask")
tmp <- lmer(happiness ~
trial * condition * qulty_smlr_var +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
lapply(X = c(1 : 7),
function(x){
emmeans(tmp,
pairwise ~ trial | condition,
at = list(qulty_smlr_var = x))
}
)
anova(models[["secondary"]][["simil.rating"]])
models[["secondary"]][["feel.rating"]] <-
lmer(happiness ~
trial * condition * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# fit model
models[["secondary"]][["feel.rating"]] <-
lmer(happiness ~
trial * condition * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
anova(models[["supplementary"]][["feel.rating"]])
anova(models[["secondary"]][["feel.rating"]])
lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "mimicry") %>%
anova()
lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "directd") %>%
anova()
lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "pentask") %>%
anova()
lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "mimicry") %>%
anova()
lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "directd") %>%
anova()
lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "pentask") %>%
anova()
tmp <- lmer(happiness ~
trial * condition * qulty_feel_var +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
lapply(X = c(1 : 7),
function(x){
emmeans(tmp,
pairwise ~ trial | condition,
at = list(qulty_feel_var = x))
}
)
rm(tmp)
models[["supplementary"]][["awareness"]] <-
lmer(happiness ~
trial * condition * image *  awareness +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
anova(models[["supplementary"]][["awareness"]])
# fit model
models[["secondary"]][["awareness"]] <-
lmer(happiness ~
trial * condition * image *  awareness +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
anova(models[["secondary"]][["awareness"]])
# fit model
models[["secondary"]][["body.aware"]] <-
lmer(happiness ~
trial * condition * image *  indiv_body +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
anova(models[["secondary"]][["body.aware"]])
summary(models[["secondary"]][["body.aware"]])
DF.l$indiv_body %>% mean()
DF.l$indiv_body %>% mean(na.rm = T)
ggplot(data = DF.w,
aes(x = qulty_rate_var)) +
geom_histogram(bins = 7) +
facet_wrap(~condition)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/DF.w.rds")
DF.l.full <- readRDS("data/DF.l.full.rds")
DF.l <- readRDS("data/DF.l.rds")
DF.l.inc <- readRDS("data/DF.l.inc.rds")
# Chunk 3
DF.l <- DF.l %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 4
DF.l.full <- DF.l.full %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 5
DF.l.inc <- DF.l.inc %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 6
f2.DF <- DF.l %>%
# select relevant variables
select(ResponseId, trial, condition,
qulty_rate_var, qulty_feel_var, qulty_smlr_var) %>%
# pivot longer so that there is one row for each moderator
pivot_longer(cols = c(qulty_rate_var,
qulty_smlr_var,
qulty_feel_var),
names_to = "qual.ind") %>%
# delete duplicate set of observations in the neutral trial
filter(trial == "happy") %>%
# relevel factors
mutate(qual.ind = factor(qual.ind,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
qual.ind = recode(qual.ind,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity")
)
# Chunk 7
# m and sd for each quality indicator for each condition
desc1 <- f2.DF %>%
group_by(condition, qual.ind) %>%
summarise(m = round(mean(value,
na.rm = T),
2),
sd = round(sd(value, na.rm = T),
2))
# n for each quality indicator for each condition
desc2 <- f2.DF %>%
filter(!is.na(value)) %>%
group_by(condition, qual.ind) %>%
tally()
# combine
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
# Chunk 8
png(filename = "figures/Figure2.png",
units = "in",
width = 7,
height = 6.5,
res = 300)
ggplot(f2.DF,
aes(x = value)) +
# split plot by condition and moderator
facet_grid(cols = vars(condition),
rows = vars(qual.ind),
scales = "free_y") +
# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
# add bin-specific percentage counts to histogram
stat_bin(aes(y = stat(width*density),
label =
paste0((round(stat(width*density),
2) * 100),
"%")),
geom = "text",
bins = 7,
size = 2,
vjust = -.21) +
# paste descriptive statistics to left of histogram
geom_text(data = desc,
aes(label = paste0("n = ", n,
"\n",
"M = ", m,
"\n",
"SD = ", sd)),
x = -1.25,
y = Inf,
size = 2,
hjust = 0,
vjust = 1.25) +
# fix scales
scale_x_continuous(name = "Self-reported rating",
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(.30, .01))) +
scale_y_continuous(expand = expand_scale(mult = c(0, .14)),
name = "Percent",
labels = scales::percent_format())
dev.off()
rm(f2.DF, desc)
# Chunk 9
f2b.DF <- DF.l.inc %>%
# select relevant variables
select(ResponseId, trial, condition,
qulty_rate_var, qulty_feel_var, qulty_smlr_var) %>%
# pivot longer so that there is one row for each moderator
pivot_longer(cols = c(qulty_rate_var,
qulty_smlr_var,
qulty_feel_var),
names_to = "qual.ind") %>%
# delete duplicate set of observations in the neutral trial
filter(trial == "happy") %>%
# relevel factors
mutate(qual.ind = factor(qual.ind,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
qual.ind = recode(qual.ind,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity")
)
# Chunk 10
# m and sd for each quality indicator for each condition
desc1 <- f2b.DF %>%
group_by(condition, qual.ind) %>%
summarise(m = round(mean(value,
na.rm = T),
2),
sd = round(sd(value, na.rm = T),
2))
# n for each quality indicator for each condition
desc2 <- f2b.DF %>%
filter(!is.na(value)) %>%
group_by(condition, qual.ind) %>%
tally()
# combine
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
# Chunk 11
png(filename = "figures/Figure2b.png",
units = "in",
width = 7,
height = 6.5,
res = 300)
ggplot(f2b.DF,
aes(x = value)) +
# split plot by condition and moderator
facet_grid(cols = vars(condition),
rows = vars(qual.ind),
scales = "free_y") +
# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
# add bin-specific percentage counts to histogram
stat_bin(aes(y = stat(width*density),
label =
paste0((round(stat(width*density),
2) * 100),
"%")),
geom = "text",
bins = 7,
size = 2,
vjust = -.21) +
# paste descriptive statistics to left of histogram
geom_text(data = desc,
aes(label = paste0("n = ", n,
"\n",
"M = ", m,
"\n",
"SD = ", sd)),
x = -1.25,
y = Inf,
size = 2,
hjust = 0,
vjust = 1.25) +
# fix scales
scale_x_continuous(name = "Self-reported rating",
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(.30, .01))) +
scale_y_continuous(expand = expand_scale(mult = c(0, .14)),
name = "Percent",
labels = scales::percent_format())
dev.off()
rm(f2b.DF, desc)
# Chunk 12
f3.DF <- DF.l.inc %>%
select(ResponseId, condition, image, trial, happiness) %>%
pivot_wider(names_from = "trial",
values_from = "happiness") %>%
rowwise() %>%
mutate(happiness.avg = mean(c(happy, neutral))) %>%
ungroup()
# Chunk 13
desc <- f3.DF %>%
group_by(image, condition) %>%
summarise(n = n(),
m = round(mean(happiness.avg),
2),
sd = round(sd(happiness.avg),
2))
# Chunk 14
png(
filename = "figures/Figure3.png",
units = "in",
width = 7,
height = 6.5,
res = 300
)
ggplot(f3.DF,
aes(x = image,
y = happiness.avg)) +
facet_grid(cols = vars(condition)) +
geom_jitter(width = .1,
alpha = .07,
colour = "dark grey") +
geom_boxplot(colour = 'dark grey',
fill = NA,
outlier.shape = NA) +
stat_summary(colour = "#3366FF",
size = .5,
fun = "mean") +
labs(y = "Self-reported happiness",
x = "Stimuli Presence") +
# add task-specific M's, SDs,
geom_text(data = desc,
aes(label = paste0("n = ", n,
"\n",
"M = ", m,
"\n",
"SD = ", sd)),
y = 7.3,
size = 2) +
scale_y_continuous(
breaks = c(1, 3, 5, 7)) +
# adjust scales
scale_y_continuous(
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(0, .1))) +
scale_x_discrete(labels = c("absent", "present"))
dev.off()
