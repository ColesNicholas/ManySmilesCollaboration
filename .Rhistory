ggplot(DF.viz,
aes(x = trial,
y = happiness)) +
facet_grid(rows = vars(image),
cols = vars(condition)) +
geom_jitter(width = .1,
alpha = .07,
colour = "dark grey") +
geom_line(alpha = .07,
aes(group = ResponseId),
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = 1,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .5,
fun = "mean") +
labs(y = "Self-reported happiness",
x = "Task") +
scale_y_continuous(
breaks = c(1, 3, 5, 7))
dev.off()
DF.viz <- DF.l %>%
# select relevant variables
select(ResponseId, trial, condition,
happiness,
awareness, qulty_rate_var,
qulty_feel_var, qulty_smlr_var,
indiv_body) %>%
# calculate a difference score between the happy and neutral poses
pivot_wider(names_from = trial,
values_from = happiness) %>%
rowwise() %>%
mutate(happ.diff = happy - neutr) %>%
ungroup() %>%
# pivot longer so that there is one row for each moderator
pivot_longer(cols = c(qulty_rate_var,
qulty_smlr_var,
qulty_feel_var,
awareness,
indiv_body),
names_to = "mod") %>%
filter(mod == "qulty_rate_var" |
mod == "qulty_smlr_var" |
mod == "qulty_feel_var") %>%
# relevel factors
mutate(condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
mod = factor(mod,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
mod = recode(mod,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity",))
DF.viz$sig.cross = as.numeric(NA)
DF.viz$mode = as.numeric(NA)
# compliance
DF.viz[DF.viz$condition == "facial mimicry" &
DF.viz$mod == "compliance", ]$sig.cross <- 5
DF.viz[DF.viz$condition == "facial mimicry" &
DF.viz$mod == "compliance", ]$mode <- 7
DF.viz[DF.viz$condition == "voluntary facial action" &
DF.viz$mod == "compliance", ]$sig.cross <- 5
DF.viz[DF.viz$condition == "voluntary facial action" &
DF.viz$mod == "compliance", ]$mode <- 7
DF.viz[DF.viz$condition == "pen-in-mouth" &
DF.viz$mod == "compliance", ]$sig.cross <- 6
DF.viz[DF.viz$condition == "pen-in-mouth" &
DF.viz$mod == "compliance", ]$mode <- 7
# similarity
DF.viz[DF.viz$condition == "facial mimicry" &
DF.viz$mod == "similarity", ]$sig.cross <- 3
DF.viz[DF.viz$condition == "facial mimicry" &
DF.viz$mod == "similarity", ]$mode <- 6
DF.viz[DF.viz$condition == "voluntary facial action" &
DF.viz$mod == "similarity", ]$sig.cross <- 2
DF.viz[DF.viz$condition == "voluntary facial action" &
DF.viz$mod == "similarity", ]$mode <- 7
DF.viz[DF.viz$condition == "pen-in-mouth" &
DF.viz$mod == "similarity", ]$sig.cross <- 2
DF.viz[DF.viz$condition == "pen-in-mouth" &
DF.viz$mod == "similarity", ]$mode <- 6
# genuineness
DF.viz[DF.viz$mod == "genuineness", ]$sig.cross <- 2
DF.viz[DF.viz$condition == "facial mimicry" &
DF.viz$mod == "genuineness", ]$mode <- 5
DF.viz[DF.viz$condition == "voluntary facial action" &
DF.viz$mod == "genuineness", ]$mode <- 5
DF.viz[DF.viz$condition == "pen-in-mouth" &
DF.viz$mod == "genuineness", ]$mode <- 1
png(filename = "figures/Figure4.png",
units = "in",
height = 7,
width = 6.5,
res = 300)
ggplot(DF.viz,
aes(x = value,
y = happ.diff)) +
facet_grid(cols = vars(condition),
rows = vars(mod)) +
geom_rect(aes(xmin = sig.cross - .25,
xmax = 7.25,
ymin = -6,
ymax = 6),
fill = "lightgreen",
alpha = .01) +
geom_rect(aes(xmin = mode - .25,
xmax = mode + .25,
ymin = -6,
ymax = 6),
fill = NA,
colour = "black") +
geom_jitter(width = .1,
alpha = .2,
colour = "dark grey") +
geom_smooth(method = 'lm') +
xlab("Self-reported rating") +
ylab("Change in self-reported happiness") +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
dev.off()
tmp <- DF.viz %>%
group_by(condition, mod) %>%
summarise(m = round(mean(value,
na.rm = T),
2),
sd = round(sd(value, na.rm = T),
2)
)
tmp2 <- DF.viz %>%
filter(!is.na(value)) %>%
group_by(condition, mod) %>%
tally()
tmp3 <- full_join(tmp, tmp2)
rm(tmp, tmp2)
png(filename = "figures/Figure2.png",
units = "in",
width = 9,
height = 5.07,
res = 300)
ggplot(DF.viz,
aes(x = value)) +
# split plot by condition and moderator
facet_grid(cols = vars(condition),
rows = vars(mod),
scales = "free_y") +
# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
# add bin-specific percentage counts to histogram
stat_bin(aes(y = stat(width*density),
label =
paste0((round(stat(width*density),
2) * 100),
"%")),
geom = "text",
bins = 7,
size = 2,
vjust = -.21) +
# paste descriptive statistics to left of histogram
geom_text(data = tmp3,
aes(label = paste0("n = ", n,
"\n",
"M = ", m,
"\n",
"SD = ", sd)),
x = -.75,
y = Inf,
size = 2,
hjust = 0,
vjust = 1.25) +
# fix scales
scale_x_continuous(name = "Self-reported rating",
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(.20, .01))) +
scale_y_continuous(expand = expand_scale(mult = c(0, .14)),
name = "Percent",
labels = scales::percent_format())
dev.off()
DF.viz <- DF.l.inc %>%
# select relevant variables
select(ResponseId, trial, condition,
happiness,
awareness, qulty_rate_var,
qulty_feel_var, qulty_smlr_var,
indiv_body) %>%
# calculate a difference score between the happy and neutral poses
pivot_wider(names_from = trial,
values_from = happiness) %>%
rowwise() %>%
mutate(happ.diff = happy - neutr) %>%
ungroup() %>%
# pivot longer so that there is one row for each moderator
pivot_longer(cols = c(qulty_rate_var,
qulty_smlr_var,
qulty_feel_var,
awareness,
indiv_body),
names_to = "mod") %>%
filter(mod == "qulty_rate_var" |
mod == "qulty_smlr_var" |
mod == "qulty_feel_var") %>%
# relevel factors
mutate(condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
mod = factor(mod,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
mod = recode(mod,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity",))
tmp <- DF.viz %>%
group_by(condition, mod) %>%
summarise(m = round(mean(value,
na.rm = T),
2),
sd = round(sd(value, na.rm = T),
2)
)
tmp2 <- DF.viz %>%
filter(!is.na(value)) %>%
group_by(condition, mod) %>%
tally()
tmp3 <- full_join(tmp, tmp2)
rm(tmp, tmp2)
png(filename = "figures/Figure2b.png",
units = "in",
width = 9,
height = 5.07,
res = 300)
ggplot(DF.viz,
aes(x = value)) +
# split plot by condition and moderator
facet_grid(cols = vars(condition),
rows = vars(mod),
scales = "free_y") +
# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
# add bin-specific percentage counts to histogram
stat_bin(aes(y = stat(width*density),
label =
paste0((round(stat(width*density),
2) * 100),
"%")),
geom = "text",
bins = 7,
size = 2,
vjust = -.21) +
# paste descriptive statistics to left of histogram
geom_text(data = tmp3,
aes(label = paste0("n = ", n,
"\n",
"M = ", m,
"\n",
"SD = ", sd)),
x = -.75,
y = Inf,
size = 2,
hjust = 0,
vjust = 1.25) +
# fix scales
scale_x_continuous(name = "Self-reported rating",
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(.20, .01))) +
scale_y_continuous(expand = expand_scale(mult = c(0, .14)),
name = "Percent",
labels = scales::percent_format())
dev.off()
meta.DF <- DF.l %>%
# pivot data wider
pivot_wider(names_from = trial,
values_from = happiness,
id_cols = c(ResponseId,
country,
lab,
UserLanguage,
condition)) %>%
# calculate difference score
rowwise() %>%
mutate(diff = happy - neutr) %>%
# for each condition and country, find correlation between two trials and the mean/sd of the difference score
group_by(condition, country) %>%
summarise(n = n(),
corr = cor(happy, neutr),
m.diff = mean(diff),
sd.diff = sd(diff)) %>%
ungroup() %>%
# calculate cohen drm
# formula: Cooper, Hedges, & Valentine, 2009; p. 229
rowwise() %>%
mutate(d = (m.diff / sd.diff) *
sqrt(2 * (1 - corr))) %>%
# calculate variance of d
mutate(d.var = ((1 / n) + ((d^2) / (2 * n))) *
2 * (1 - corr)) %>%
# calculate CI of d
mutate(lb = d - (1.96 * sqrt(d.var)),
ub = d + (1.96 * sqrt(d.var))) %>%
# select relevant variables
select(condition, country, d, d.var, lb, ub)
# fit meta-analyses
meta.m  <- rma(
yi = d,
vi = d.var,
slab = country,
data = meta.DF,
subset = condition == "mimicry"
)
meta.d <- rma(
yi = d,
vi = d.var,
slab = country,
data = meta.DF,
subset = condition == "directd"
)
meta.p <- rma(
yi = d,
vi = d.var,
slab = country,
data = meta.DF,
subset = condition == "pentask"
)
# append meta-analytic overall effects to dataframe
meta.DF <- meta.DF %>%
mutate(Q = NA,
Q.p = NA,
i2 = NA,
t2 = NA)
meta.DF <- rbind(
meta.DF,
# mimicry
cbind(
condition = "mimicry",
country = "Overall",
d = meta.m[["beta"]] %>%
as.numeric(),
d.var = meta.m[["se"]] ^ 2,
lb = meta.m[["ci.lb"]],
ub = meta.m[["ci.ub"]],
Q = round(meta.m$QE, 2),
Q.p = round(meta.m$QEp, 3),
i2 = round(meta.m$I2, 0),
t2 = round(meta.m$tau2, 2)
),
# directd
cbind(
condition = "directd",
country = "Overall",
d = meta.d[["beta"]] %>%
as.numeric(),
d.var = meta.d[["se"]] ^ 2,
lb = meta.d[["ci.lb"]],
ub = meta.d[["ci.ub"]],
Q = round(meta.d$QE, 2),
Q.p = round(meta.d$QEp, 3),
i2 = round(meta.d$I2, 0),
t2 = round(meta.d$tau2, 2)
),
# pentask
cbind(
condition = "pentask",
country = "Overall",
d = meta.p[["beta"]] %>%
as.numeric(),
d.var = meta.p[["se"]] ^ 2,
lb = meta.p[["ci.lb"]],
ub = meta.p[["ci.ub"]],
Q = round(meta.p$QE, 2),
Q.p = round(meta.p$QEp, 3),
i2 = round(meta.p$I2, 0),
t2 = round(meta.p$tau2, 2)
)
) %>% as.data.frame()
rm(meta.d, meta.m, meta.p)
meta.DF <- meta.DF %>%
mutate(
# identify which effects are overall vs. country-specific
overall = if_else(condition = country == "Overall",
true = 1,
false = 0),
# order effect sizes by whether they are (a) overall vs. country-specific and then (b) size of the effect
country = fct_reorder(country,
desc(d)),
country = fct_reorder(country,
desc(overall)),
# fix format of numeric variables
d = as.numeric(d),
lb = as.numeric(lb),
ub = as.numeric(ub),
# relevel and recode condition variable
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"))
png(filename = "figures/Figure5.png",
units = "in",
width = 9,
height = 5.07,
res = 300)
ggplot(data = meta.DF,
aes(x = country,
y = d,
ymin = lb,
ymax = ub)) +
geom_hline(yintercept = 0,
color = "black",
linetype = "dashed",
alpha = .5) +
geom_point(aes(shape = as.factor(overall),
size = as.factor(overall),
colour = as.factor(overall))) +
geom_errorbar(width = .5,
aes(colour = as.factor(overall))) +
scale_shape_manual(values = c(15, 18)) +
scale_size_manual(values = c(2, 4)) +
scale_color_manual(values= c("dark grey",
"#3366FF")) +
coord_flip() +
facet_grid(cols = vars(condition)) +
labs(y = expression(paste("Cohen's ",
italic("d"),
"(Happy pose minus neutral pose)")),
x = "Country") +
ylim(-.5, 1.3) +
geom_richtext(data = meta.DF[meta.DF$overall == 1, ],
aes(label = paste0("overall <i>d</i> = ", round(d, 2),
" [", round(lb, 2), ", ",
round(ub, 2), "]",
"<br>",
" Q = ", Q, ", <i>p</i> < .005",
"<br>",
" <i>I<sup>2</sup></i> = ", i2, "%",
", <i>T<sup>2</sup></i> = ", t2),
x = 19.5,
y = 1.3),
size = 2.2,
label.colour = NA,
hjust = 1)
dev.off()
models[["primary"]][["partial"]] <-
lmer(happiness ~ trial * condition * image +
(1 | lab) +
(1 | ResponseId),
data = DF.l.inc)
models <- list()
sjp.lmer(models[["primary"]][["partial"]])
library(sjPlot)
library(sjmisc)
sjp.lmer(models[["primary"]][["partial"]])
?sjp.lmer
plot_model(models[["primary"]][["partial"]])
models[["primary"]][["partial"]]
models[["primary"]][["partial"]] <-
lmer(happiness ~ trial * condition * image +
(1 | lab) +
(1 | ResponseId),
data = DF.l.inc)
plot_model(models[["primary"]][["partial"]])
plot_model(models[["primary"]][["partial"]], type = RE)
plot_model(models[["primary"]][["partial"]], type = 'RE')
plot_model(models[["primary"]][["partial"]], type = 're')
model <- lmer(happiness ~ trial +
(1 + country | lab) +
(1 | ResponseId),
data = DF.l.inc)
model <- lmer(happiness ~ trial +
(1 + trial | country) +
(1 | ResponseId),
data = DF.l.inc)
plot.model(model,
type = "re")
plot_model(model,
type = "re")
model <- lmer(happiness ~ trial +
(1 + trial | country) +
(1 | ResponseId),
data = DF.l.inc,
subset = condition != "pentask")
plot_model(model,
type = "re")
anova(model)
model <- lmer(happiness ~ trial +
(1 + trial | country) +
(1 | ResponseId),
data = DF.l,
subset = condition != "pentask")
plot_model(model,
type = "re")
