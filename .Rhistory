strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
# descriptives for full sample
desc.1 <- DF.w %>%
group_by(country) %>%
summarise(t.n = n(),
t.m.age = mean(indiv_agee_var,
na.rm = T),
t.sd.age = sd(indiv_agee_var,
na.rm = T),
t.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
t.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
t.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dev = mean(inc.dev),
inc.awa = sum(inc.awa, na.rm = T) / n(),
inc.dis = sum(inc.dis, na.rm = T) / n()
)
# descriptives for subset that met inclusion criteria
desc.2 <- DF.w %>%
filter(inc == 1,
inc.awa == 1) %>%
group_by(country) %>%
summarise(i.n = n(),
i.m.age = mean(indiv_agee_var,
na.rm = T),
i.sd.age = sd(indiv_agee_var,
na.rm = T),
i.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
i.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
i.other = sum(indiv_gend_var == 3, na.rm = T) / n()
)
# merge descriptives
desc = full_join(desc.1, desc.2, by = 'country')
rm(desc.1, desc.2)
# clean table
desc <- desc %>%
# round values
mutate_if(is.numeric,
funs(round(x = .,
digits = 2)
)
) %>%
# create age text
mutate(t.m.age = paste0(t.m.age,
" (", t.sd.age, ")"),
i.m.age = paste0(i.m.age,
" (", i.m.age, ")")
) %>%
# create gender text
mutate(t.women = paste0(t.women, "; ",
t.men, "; ",
t.other),
i.women = paste0(i.women, "; ",
i.men, "; ",
i.other)) %>%
# delete vestigial
select(-c(t.sd.age, t.men, t.other,
i.sd.age, i.men, i.other))
# export table
write.csv(desc, "desc.csv")
# Chunk 4
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# inclusion criteria
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# Chunk 5
models <- list()
# fit model
models[["primary"]][["prereg.min"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l.inc)
# inspect results
summary(models[["primary"]][["prereg.min"]])
anova(models[["primary"]][["prereg.min"]])
joint_tests(models[["primary"]][["prereg.min"]],
by = "condition",
lmerTest.limit = 9999)
0.0954 /2
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
# descriptives for full sample
desc.1 <- DF.w %>%
group_by(country) %>%
summarise(t.n = n(),
t.m.age = mean(indiv_agee_var,
na.rm = T),
t.sd.age = sd(indiv_agee_var,
na.rm = T),
t.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
t.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
t.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dev = mean(inc.dev),
inc.awa = sum(inc.awa, na.rm = T) / n(),
inc.dis = sum(inc.dis, na.rm = T) / n()
)
# descriptives for subset that met inclusion criteria
desc.2 <- DF.w %>%
filter(inc == 1,
inc.awa == 1) %>%
group_by(country) %>%
summarise(i.n = n(),
i.m.age = mean(indiv_agee_var,
na.rm = T),
i.sd.age = sd(indiv_agee_var,
na.rm = T),
i.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
i.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
i.other = sum(indiv_gend_var == 3, na.rm = T) / n()
)
# merge descriptives
desc = full_join(desc.1, desc.2, by = 'country')
rm(desc.1, desc.2)
# clean table
desc <- desc %>%
# round values
mutate_if(is.numeric,
funs(round(x = .,
digits = 2)
)
) %>%
# create age text
mutate(t.m.age = paste0(t.m.age,
" (", t.sd.age, ")"),
i.m.age = paste0(i.m.age,
" (", i.m.age, ")")
) %>%
# create gender text
mutate(t.women = paste0(t.women, "; ",
t.men, "; ",
t.other),
i.women = paste0(i.women, "; ",
i.men, "; ",
i.other)) %>%
# delete vestigial
select(-c(t.sd.age, t.men, t.other,
i.sd.age, i.men, i.other))
# export table
write.csv(desc, "desc.csv")
# Chunk 4
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# inclusion criteria
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# Chunk 5
models <- list()
# Chunk 6
# fit model
models[["primary"]][["prereg.min"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l.inc)
# inspect results
summary(models[["primary"]][["prereg.min"]])
anova(models[["primary"]][["prereg.min"]])
joint_tests(models[["primary"]][["prereg.min"]],
by = "condition",
lmerTest.limit = 9999)
joint_tests(models[["primary"]][["prereg.min"]],
by = c("image", "condition"),
lmerTest.limit = 9999)
# descriptives
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ image | condition,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ trial | condition,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ trial | image |condition,
adjust = "none")
# Chunk 7
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l.inc,
subset = condition != "pentask") %>%
anova()
# fit model
models[["primary"]][["full.sens"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l)
# inspect results
summary(models[["primary"]][["full.sens"]])
anova(models[["primary"]][["full.sens"]])
joint_tests(models[["primary"]][["full.sens"]],
by = "condition",
lmerTest.limit = 9999)
joint_tests(models[["primary"]][["full.sens"]],
by = c("image", "condition"),
lmerTest.limit = 9999)
joint_tests(models[["primary"]][["full.sens"]],
by = "condition",
lmerTest.limit = 9999)
emmeans(models[["primary"]][["prereg.max"]],
pairwise ~ trial | condition,
adjust = "none")
emmeans(models[["primary"]][["full.sens"]],
pairwise ~ trial | condition,
adjust = "none")
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
# descriptives for full sample
desc.1 <- DF.w %>%
group_by(country) %>%
summarise(t.n = n(),
t.m.age = mean(indiv_agee_var,
na.rm = T),
t.sd.age = sd(indiv_agee_var,
na.rm = T),
t.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
t.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
t.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dev = mean(inc.dev),
inc.awa = sum(inc.awa, na.rm = T) / n(),
inc.dis = sum(inc.dis, na.rm = T) / n()
)
# descriptives for subset that met inclusion criteria
desc.2 <- DF.w %>%
filter(inc == 1,
inc.awa == 1) %>%
group_by(country) %>%
summarise(i.n = n(),
i.m.age = mean(indiv_agee_var,
na.rm = T),
i.sd.age = sd(indiv_agee_var,
na.rm = T),
i.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
i.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
i.other = sum(indiv_gend_var == 3, na.rm = T) / n()
)
# merge descriptives
desc = full_join(desc.1, desc.2, by = 'country')
rm(desc.1, desc.2)
# clean table
desc <- desc %>%
# round values
mutate_if(is.numeric,
funs(round(x = .,
digits = 2)
)
) %>%
# create age text
mutate(t.m.age = paste0(t.m.age,
" (", t.sd.age, ")"),
i.m.age = paste0(i.m.age,
" (", i.m.age, ")")
) %>%
# create gender text
mutate(t.women = paste0(t.women, "; ",
t.men, "; ",
t.other),
i.women = paste0(i.women, "; ",
i.men, "; ",
i.other)) %>%
# delete vestigial
select(-c(t.sd.age, t.men, t.other,
i.sd.age, i.men, i.other))
# export table
write.csv(desc, "desc.csv")
# Chunk 4
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# inclusion criteria
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# Chunk 5
models <- list()
# Chunk 6
# fit model
models[["primary"]][["prereg.min"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l.inc)
# inspect results
summary(models[["primary"]][["prereg.min"]])
anova(models[["primary"]][["prereg.min"]])
joint_tests(models[["primary"]][["prereg.min"]],
by = "condition",
lmerTest.limit = 9999)
joint_tests(models[["primary"]][["prereg.min"]],
by = c("image", "condition"),
lmerTest.limit = 9999)
# descriptives
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ image | condition,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ trial | condition,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ trial | image |condition,
adjust = "none")
# Chunk 7
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l.inc,
subset = condition != "pentask") %>%
anova()
# Chunk 9
# fit model
models[["primary"]][["full.sens"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l)
# inspect results
summary(models[["primary"]][["full.sens"]])
anova(models[["primary"]][["full.sens"]])
joint_tests(models[["primary"]][["full.sens"]],
by = "condition",
lmerTest.limit = 9999)
emmeans(models[["primary"]][["full.sens"]],
pairwise ~ trial | condition,
adjust = "none")
joint_tests(models[["primary"]][["full.sens"]],
by = c("image", "condition"),
lmerTest.limit = 9999)
# fit model
models[["secondary"]][["alt.exp.no.inc"]] <-
lmer(happiness ~ trial * condition * image +
(1 | lab) +
(1 | ResponseId),
data = DF.l.full)
# inspect results
anova(models[["secondary"]][["alt.exp.no.inc"]])
joint_tests(models[["secondary"]][["alt.exp.no.inc"]],
by = "image",
lmerTest.limit = 9999)
emmeans(models[["secondary"]][["alt.exp.no.inc"]],
pairwise ~ trial | condition | image,
adjust = "none")
