color = "image",
palette = "jco")
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank())
png(filename = "output/figures/Figure2_new.png",
units = "in",
width = 7,
height = 6.5,
res = 300)
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank())
dev.off()
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position= "top")
DF.l$happiness %>% max()
DF.l$happiness %>% min()
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
ylim(1, 7) +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position= "top")
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
# ylim(1, 7) +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position= "top")
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
ylim(1, 4) +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position= "top")
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
ylim(1, 4) +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position= "top")
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco",
ggpar(ylim(1, 4)))
?ggpar
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
ggpar(ylim(1, 4))
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") %>%
ggpar(ylim(1, 4))
p <- ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco")
ggpar(p, ylim(1, 4))
ggpar(p,
ylim = c(1, 4))
p <- ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco")
ggpar(p,
ylim = c(2, 4))
p <- ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco")
ggpar(p,
ylim = c(2, 3.5))
p <- ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco")
ggpar(p,
ylim = c(2.5, 3.5))
p <- ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco")
ggpar(p,
ylim = c(1, 3))
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco")
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position= "top")
png(filename = "output/figures/Figure2_new.png",
units = "in",
width = 7,
height = 4,
res = 300)
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position= "top")
dev.off()
?ggpubr
?ggline
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'ggtext', 'metafor',
'ggpubr')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
DF.l <- DF.l %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 4
DF.l.full <- DF.l.full %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 5
DF.l.inc <- DF.l.inc %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 6
f2.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1)
png(filename = "output/figures/Figure2.png",
units = "in",
width = 7,
height = 4,
res = 300)
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position= "top")
dev.off()
rm(f2.DF)
# Chunk 7
f5.DF <- DF.l %>%
# select relevant variables
select(ResponseId, trial, condition,
happiness, qulty_rate_var,
qulty_feel_var, qulty_smlr_var) %>%
# calculate a difference score between the happy and neutral posesâ˜º
pivot_wider(names_from = trial,
values_from = happiness) %>%
rowwise() %>%
mutate(happ.diff = happy - neutral) %>%
ungroup() %>%
# pivot longer so that there is one row for each moderator
pivot_longer(cols = c(qulty_rate_var,
qulty_smlr_var,
qulty_feel_var,
),
names_to = "mod") %>%
# relevel factors
mutate(mod = factor(mod,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
mod = recode(mod,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity"))
# Chunk 8
f5.DF$sig.cross = as.numeric(NA)
f5.DF$mode = as.numeric(NA)
# compliance
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "compliance", ]$sig.cross <- 5
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "compliance", ]$mode <- 7
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "compliance", ]$sig.cross <- 5
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "compliance", ]$mode <- 7
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "compliance", ]$sig.cross <- 6
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DFz$mod == "compliance", ]$mode <- 7
# similarity
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "similarity", ]$sig.cross <- 3
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "similarity", ]$mode <- 6
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "similarity", ]$sig.cross <- 2
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "similarity", ]$mode <- 7
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "similarity", ]$sig.cross <- 2
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "similarity", ]$mode <- 6
# genuineness
f5.DF[f5.DF$mod == "genuineness", ]$sig.cross <- 2
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "genuineness", ]$mode <- 5
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "genuineness", ]$mode <- 5
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "genuineness", ]$mode <- 1
# Chunk 9
png(filename = "output/figures/Figure3.png",
units = "in",
height = 7,
width = 6.5,
res = 300)
ggplot(f5.DF,
aes(x = value,
y = happ.diff)) +
facet_grid(cols = vars(condition),
rows = vars(mod)) +
geom_rect(aes(xmin = sig.cross - .25,
xmax = 7.25,
ymin = -6,
ymax = 6),
fill = "lightgreen",
alpha = .01) +
geom_rect(aes(xmin = mode - .25,
xmax = mode + .25,
ymin = -6,
ymax = 6),
fill = NA,
colour = "black") +
geom_jitter(width = .1,
alpha = .2,
colour = "dark grey") +
geom_smooth(method = 'lm') +
xlab("Self-reported rating") +
ylab("Change in self-reported happiness") +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
dev.off()
rm(f5.DF)
# Chunk 1
######################
## Setup R environment
######################
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'kableExtra')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
######################
## Open data
######################
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
######################
## Table 1: Calculate descriptives
######################
# descriptives for full sample
desc.1 <- DF.w %>%
group_by(country) %>%
summarise(t.n = n(),
t.m.age = mean(indiv_agee_var,
na.rm = T),
t.sd.age = sd(indiv_agee_var,
na.rm = T),
t.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
t.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
t.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# descriptives for subset that met inclusion criteria
desc.2 <- DF.w %>%
filter(inc == 1,
inc.awa == 1) %>%
group_by(country) %>%
summarise(i.n = n(),
i.m.age = mean(indiv_agee_var,
na.rm = T),
i.sd.age = sd(indiv_agee_var,
na.rm = T),
i.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
i.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
i.other = sum(indiv_gend_var == 3, na.rm = T) / n()
)
# merge descriptives
desc = full_join(desc.1, desc.2, by = 'country')
rm(desc.1, desc.2)
######################
## Clean table
######################
desc <- desc %>%
# round values
mutate_if(is.numeric,
funs(round(x = .,
digits = 2)
)
) %>%
# create age text
mutate(t.m.age = paste0(t.m.age,
" (", t.sd.age, ")"),
i.m.age = paste0(i.m.age,
" (", i.sd.age, ")")
) %>%
# create gender text
mutate(t.women = paste0(t.women, "; ",
t.men, "; ",
t.other),
i.women = paste0(i.women, "; ",
i.men, "; ",
i.other)) %>%
# delete vestigial
select(-c(t.sd.age, t.men, t.other,
i.sd.age, i.men, i.other))
rm(list = ls())
load("C:/Users/ncole/Documents/GitHub/ManySmilesCollaboration/BayesFactorAnalyses.RData")
(bf16 <- lmbf16.1/lmb16.0)
(bf17 <- lmbf17.1/lmbf17.0)
1 / (bf17 <- lmbf17.1/lmbf17.0)
