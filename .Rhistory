absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 5
DF.l.inc <- DF.l.inc %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 6
# download world data
world <- ne_countries(scale = "medium",
returnclass = "sf")
# download msc country data
msc <- read.csv("data/country.n.csv")[, 2:3] %>%
arrange(n) %>%
rename(iso_a3 = country)
# merge datasets
msworld <- left_join(world, msc,
by = 'iso_a3') %>%
mutate(n = ifelse(is.na(n),
0,
n)) %>%
select(iso_a3, n) %>%
arrange(-n)
# plot data
pdf(file = "output/figures/Figure1.pdf",
width = 3.46,
height = 3.46)
ggplot() +
layer_spatial(data = msworld,
aes(fill = n),
color = NA)+
coord_sf(crs = 'ESRI:54030') +
scale_fill_gradient(low = '#D0CECE',
high = "#820000") +
cowplot::theme_minimal_grid() +
theme(legend.position = 'top',
legend.title = element_text(size = 7),
legend.text = element_text(size = 5),
legend.key.width= unit(1.4, 'cm'),
legend.key.height= unit(.1, 'cm'),
legend.margin = margin(b = -10),
legend.justification = "center",
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major = element_line(size = .2))
dev.off()
write.csv(x = msc,
file = "data/source/Fig1_Source.csv",
row.names = F)
rm(msc, msworld, world)
# prep dataframe
f2.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
# select relevant variables
select(ResponseId, trial, happiness,
image, condition) %>%
# recode trial
mutate(trial = recode(trial,
`filler 1`  = "filler",
`filler 2`  = "filler"))
# get descriptives
desc1 <- f2.DF %>%
group_by(trial, condition, image) %>%
summarise(m = round(mean(happiness),
2),
sd = round(sd(happiness),
2))
desc1
desc1 <- f2.DF %>%
group_by(trial, condition, image) %>%
summarise(m = round(mean(happiness),
2),
sd = round(sd(happiness),
2))
desc2 <- f2.DF %>%
group_by(condition, image) %>%
summarise(n = length(unique(ResponseId)))
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = .22,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .25,
width = .10,
fun.data = mean_se,
geom = "errorbar") +
# add task-specific M's and SDs
geom_text(data = desc,
aes(label = paste0("M = ", m,
"\n",
"SD = ", sd)),
y = Inf,
size = 2,
vjust = 2) +
# add condition-specific ns
geom_text(data = desc,
aes(label = paste0("n = ", n)),
x = 2.5,
y = Inf,
size = 2,
vjust = 2) +
# adjust scales
scale_x_discrete(
expand = expand_scale(mult = c(.2, .2))) +
scale_y_continuous(
breaks = c(1, 3, 5, 7)) +
labs(y = "Self-reported happiness",
x = "Task")
# prep dataframe
f2.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
# select relevant variables
select(ResponseId, trial, happiness,
image, condition) %>%
# recode trial
mutate(trial = recode(trial,
`filler 1`  = "filler",
`filler 2`  = "filler"))
# get descriptives
desc1 <- f2.DF %>%
group_by(trial, condition, image) %>%
summarise(m = round(mean(happiness),
2),
sd = round(sd(happiness),
2))
desc2 <- f2.DF %>%
group_by(condition, image) %>%
summarise(n = length(unique(ResponseId)))
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
# plot
pdf(file = "output/figures/Figure2.pdf",
width = 3.46,
height = 3.46)
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = .22,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .25,
width = .10,
fun.data = mean_se,
geom = "errorbar") +
# add task-specific M's and SDs
geom_text(data = desc,
aes(label = paste0("M = ", m,
"\n",
"SD = ", sd)),
y = Inf,
size = 2,
vjust = 2) +
# add condition-specific ns
geom_text(data = desc,
aes(label = paste0("n = ", n)),
x = 2.5,
y = Inf,
size = 2,
vjust = 2) +
# adjust scales
scale_x_discrete(
expand = expand_scale(mult = c(.2, .2))) +
scale_y_continuous(
breaks = c(1, 3, 5, 7)) +
labs(y = "Self-reported happiness",
x = "Task")
dev.off()
write.csv(x = f2.DF,
file = "data/source/Fig2_Source.csv",
row.names = F)
rm(f2.DF)
# prep dataframe
f2.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
# select relevant variables
select(ResponseId, trial, happiness,
image, condition) %>%
# recode trial
mutate(trial = recode(trial,
`filler 1`  = "filler",
`filler 2`  = "filler"))
# get descriptives
desc1 <- f2.DF %>%
group_by(trial, condition, image) %>%
summarise(m = round(mean(happiness),
2),
sd = round(sd(happiness),
2))
desc2 <- f2.DF %>%
group_by(condition, image) %>%
summarise(n = length(unique(ResponseId)))
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
# plot
pdf(file = "output/figures/Figure2.pdf",
width = 3.46,
height = 3.46)
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = .22,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .25,
width = .10,
fun.data = mean_se,
geom = "errorbar") +
# add task-specific M's and SDs
geom_text(data = desc,
aes(label = paste0("M = ", m,
"\n",
"SD = ", sd)),
y = Inf,
size = 1,
vjust = 2) +
# add condition-specific ns
geom_text(data = desc,
aes(label = paste0("n = ", n)),
x = 2.5,
y = Inf,
size = 1,
vjust = 2) +
# adjust scales
scale_x_discrete(
expand = expand_scale(mult = c(.2, .2))) +
scale_y_continuous(
breaks = c(1, 3, 5, 7)) +
labs(y = "Self-reported happiness",
x = "Task")
dev.off()
write.csv(x = f2.DF,
file = "data/source/Fig2_Source.csv",
row.names = F)
rm(f2.DF)
# prep dataframe
f2.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
# select relevant variables
select(ResponseId, trial, happiness,
image, condition) %>%
# recode trial
mutate(trial = recode(trial,
`filler 1`  = "filler",
`filler 2`  = "filler"))
# get descriptives
desc1 <- f2.DF %>%
group_by(trial, condition, image) %>%
summarise(m = round(mean(happiness),
2),
sd = round(sd(happiness),
2))
desc2 <- f2.DF %>%
group_by(condition, image) %>%
summarise(n = length(unique(ResponseId)))
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
# plot
pdf(file = "output/figures/Figure2.pdf",
width = 3.46,
height = 3.46)
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = .22,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .25,
width = .10,
fun.data = mean_se,
geom = "errorbar") +
# add task-specific M's and SDs
geom_text(data = desc,
aes(label = paste0("M = ", m,
"\n",
"SD = ", sd)),
y = Inf,
size = 1,
vjust = 2) +
# add condition-specific ns
geom_text(data = desc,
aes(label = paste0("n = ", n)),
x = 2,
y = Inf,
size = 1,
vjust = 2) +
# adjust scales
scale_x_discrete(
expand = expand_scale(mult = c(.2, .2))) +
scale_y_continuous(
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(0, .25))) +
labs(y = "Self-reported happiness",
x = "Task")
dev.off()
write.csv(x = f2.DF,
file = "data/source/Fig2_Source.csv",
row.names = F)
rm(f2.DF)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# descriptives
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# n participants who met inclusion criteria
DF.l.inc$ResponseId %>% unique() %>% length()
models <- readRDS("output/analyses/freq.models.Rds")
emmeans(models[["primary"]][["prereg"]],
pairwise ~ image,
adjust = "none")
emmeans(models[["primary"]][["prereg"]],
pairwise ~ image,
adjust = "none") %>% confint()
emmeans(models[["primary"]][["prereg"]],
pairwise ~ trial,
adjust = "none") %>% confint()
emmeans(models[["primary"]][["prereg"]],
pairwise ~ trial | condition,
adjust = "none") %>% confint()
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial.r | condition,
at = list(image = "absentt"),
adjust = "none",
lmerTest.limit = 4512) %>% confint()
summary(models[["secondary"]][["compl.mod"]])
summary(models[["secondary"]][["compl.mod"]]) %>%
confint()
confint(models[["secondary"]][["compl.mod"]])
emmeans(models[["secondary"]][["compl.diff"]],
pairwise ~ image,
adjust = "none",
pbkrtest.limit = 3878) %>% confint()
emmeans(models[["secondary"]][["compl.diff"]],
pairwise ~ condition,
adjust = "none",
pbkrtest.limit = 3878) %>% confint()
emmeans(models[["secondary"]][["simil.diff"]],
pairwise ~ image,
adjust = "none",
lmerTest.limit = 3878) %>% confint()
emmeans(models[["secondary"]][["simil.diff"]],
pairwise ~ condition,
adjust = "none",
lmerTest.limit = 3878) %>% confint()
emmeans(models[["secondary"]][["gen.diff"]],
pairwise ~ image,
adjust = "none",
lmerTest.limit = 3878) %>% confint()
emmeans(models[["secondary"]][["gen.diff"]],
pairwise ~ condition,
adjust = "none",
lmerTest.limit = 3878) %>% confint()
emmeans(models[["secondary"]][["awareness.diff"]],
pairwise ~ condition,
adjust = "none",
lmerTest.limit = 4512) %>% confint()
emmeans(models[["secondary"]][["anger"]],
pairwise ~ trial,
adjust = "none",
lmerTest.limit = 3008) %>% confint()
emmeans(models[["secondary"]][["anxiety"]],
pairwise ~ trial,
adjust = "none",
lmerTest.limit = 3008) %>% confint()
emmeans(models[["secondary"]][["anger"]],
pairwise ~ condition,
adjust = "none",
lmerTest.limit = 3008) %>% confint()
emmeans(models[["secondary"]][["anxiety"]],
pairwise ~ condition,
adjust = "none",
lmerTest.limit = 3008) %>% confint()
emmeans(models[["primary"]][["prereg.noRS"]],
pairwise ~ trial | condition,
adjust = "none") %>% confint()
emmeans(models[["exploratory"]][["primary.noexc"]],
pairwise ~ trial | condition,
adjust = "none") %>% confint()
