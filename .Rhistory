packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background =
element_rect(fill = "gray35"),
strip.text =
element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/DF.w.rds")
DF.l.full <- readRDS("data/DF.l.full.rds")
DF.l <- readRDS("data/DF.l.rds")
DF.l.inc <- readRDS("data/DF.l.inc.rds")
# Chunk 3
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# gender
table(DF.l$indiv_gend_var) %>% prop.table()
# age
DF.w %>%
summarise(m = mean(indiv_agee_var,
na.rm = T),
sd = sd(indiv_agee_var,
na.rm = T))
# Chunk 4
models <- list()
lm1 <- jglmm(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)
data = DF.l.inc)
lm1 <- jglmm(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab),
data = DF.l.inc)
options(JULIA_HOME = "C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin")
library(jglmm)
jglmm_setup()
lm1 <- jglmm(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab),
data = DF.l.inc)
lm1
summary(lm1)
tidy(lm1)
# This code chunk simply makes sure that all the libraries used here are installed.
packages <- c("lme4", "JuliaCall")
if ( length(missing_pkgs <- setdiff(packages, rownames(installed.packages()))) > 0) {
message("Installing missing package(s): ", paste(missing_pkgs, collapse = ", "))
install.packages(missing_pkgs)
}
dyn.load("C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin/libopenlibm.DLL")
julia_setup()
julia_setup
julia.dir =
julia_setup(JULIA_HOME = "C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin/libopenlibm.DLL")
library(JuliaCall)
julia.dir =
julia_setup(JULIA_HOME = "C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin/libopenlibm.DLL")
julia.dir$library("MixedModels")
julia.dir$assign("DF.l.inc", DF.l.inc)
julia.dir$assign("form", formula(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)))
results =
julia.dir$eval("res = fit(LinearMixedModel, form, DF.l.inc)",
need_return = c("Julia"))
julia.dir$assign("DF.l.inc", DF.l.inc)
results =
julia.dir$eval("res = fit(LinearMixedModel, form, DF.l.inc)",
need_return = c("Julia"))
julia.dir$assign("data", DF.l.inc)
julia.dir$assign("form", formula(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)))
results =
julia.dir$eval("res = fit(LinearMixedModel, form, data)",
need_return = c("Julia"))
julia.dir$eval("res")
julia.dir$eval("Anova(res)")
julia.dir$library("Anova")
results
julia.dir$eval("res")
results
results %>% class()
# identify desired model
f <- happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)
# find most complex model that converges
m <- buildmer(f,
reduce.fixed = F,
data = DF.l.inc,
buildmerControl =
buildmerControl(
direction = "order",
control = lmerControl(optimizer = "bobyqa"),
REML = F
)
)
# fit most complex model that converges
models[["primary"]][["prereg"]] <-
lmer(formula(m@model),
data = DF.l.inc,
control = lmerControl(optimizer = "bobyqa"))
get.wd()
getwd()
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background =
element_rect(fill = "gray35"),
strip.text =
element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/DF.w.rds")
DF.l.full <- readRDS("data/DF.l.full.rds")
DF.l <- readRDS("data/DF.l.rds")
DF.l.inc <- readRDS("data/DF.l.inc.rds")
# Chunk 3
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# gender
table(DF.l$indiv_gend_var) %>% prop.table()
# age
DF.w %>%
summarise(m = mean(indiv_agee_var,
na.rm = T),
sd = sd(indiv_agee_var,
na.rm = T))
# Chunk 4
models <- list()
f <- happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)
m <- buildmer(f,
reduce.fixed = F,
data = DF.l.inc,
buildmerControl =
buildmerControl(
direction = "order",
control = lmerControl(optimizer = "bobyqa"),
REML = F
)
)
libary(buildmer)
library(buildmer)
m <- buildmer(f,
reduce.fixed = F,
data = DF.l.inc,
buildmerControl =
buildmerControl(
direction = "order",
control = lmerControl(optimizer = "bobyqa"),
REML = F
)
)
formula(m@model)
# identify desired model
f <- happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)
# find most complex model that converges
m <- buildmer(f,
reduce.fixed = F,
data = DF.l.inc,
REML = F,
buildmerControl =
buildmerControl(
direction = "order",
control = lmerControl(optimizer = "bobyqa"),
)
)
formula(m@model)
packages <- c("lme4", "JuliaCall")
if ( length(missing_pkgs <- setdiff(packages, rownames(installed.packages()))) > 0) {
message("Installing missing package(s): ", paste(missing_pkgs, collapse = ", "))
install.packages(missing_pkgs)
}
# load Julia
dyn.load("C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin/libopenlibm.DLL")
julia.dir =
julia_setup(JULIA_HOME = "C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin/libopenlibm.DLL")
julia.dir$library("MixedModels")
julia.dir$library("Anova")
julia.dir$assign("data", DF.l.inc)
julia.dir$assign("form", formula(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)))
results =
julia.dir$eval("res = fit(LinearMixedModel, form, data)",
need_return = c("Julia"))
julia.dir$eval("res")
tmp <- as(results, "merModLmerTest")
DF.w <- readRDS("data/DF.w.rds")
DF.l.full <- readRDS("data/DF.l.full.rds")
DF.l <- readRDS("data/DF.l.rds")
DF.l.inc <- readRDS("data/DF.l.inc.rds")
library(lme4)
library(JuliaCall)
loc <- "C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin/libopenlibm.DLL"
dyn.load(loc)
dyn.load("C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin/libopenlibm.DLL")
julia.dir = julia_setup(JULIA_HOME = loc)
library(Julia)
julia_setup()
library(JuliaCall)
options(JULIA_HOME = "C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin/")
julia_setup()
julia.dir$library("MixedModels")
julia.dir$library("JellyMe4")
julia.dir$library("MixedModels")
julia_console()
julia_install_package("MixedModels")
julia_install_package("Jelly4Me")
julia_install_package("JellyMe4")
julia_library("MixedModels")
julia_library("JellyMe4")
julia.dir$assign("data", DF.l.inc)
julia.assign("DF.l.inc", DF.l.inc)
julia_assign("DF.l.inc", DF.l.inc)
julia_assign("form", formula(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)))
rm(loc)
julia_eval("res = fit(LinearMixedModel, form, DF.l.inc)")
julia_assign("data", DF.l.inc)
julia_eval("res = fit(LinearMixedModel, form, data)")
julia_eval("res = fit(LinearMixedModel,
@formula(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)),
data)")
julia_eval("res = fit(MixedModel,
@formula(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)),
data)")
julia_assign("res = fit(MixedModel,
@formula(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)),
data)")
julia_command("res = fit(MixedModel,
@formula(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)),
data)")
julia_command("tmp = (res, data)")
julia_command("@rput tmp")
julia_command("tmp = (res, data);")
julia_command("@rput tmp;")
julia_eval(tmp)
julia_eval("tmp")
julia_eval("res")
julia_eval("tmp")
julia_eval("res")
julia_eval("[res]")
tmp <- julia_eval("[res]")
View(tmp)
julia_eval("tmp = (res, data)")
julia_eval("tmp = ([res], [data])")
tmp <- julia_eval("tmp = ([res], [data])")
View(tmp)
julia_command("@rput [tmp]")
julia_command("@rput tmp;")
View(tmp)
tmp <- julia_command("@rput tmp;")
rm(tmp)
julia_command("as([tmp], "merModLmerTest"")
julia_command("as([tmp], "merModLmerTest")")
tmp <- julia_command("res = fit(MixedModel,
@formula(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)),
data)")
rm(tmp)
tmp <- julia_eval("res")
library(lme4)
library(JuliaCall)
# open data
DF.w <- readRDS("data/DF.w.rds")
DF.l.full <- readRDS("data/DF.l.full.rds")
DF.l <- readRDS("data/DF.l.rds")
DF.l.inc <- readRDS("data/DF.l.inc.rds")
# set up Julia
options(JULIA_HOME = "C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin/")
julia_setup()
julia_library("MixedModels")
julia_library("JellyMe4")
julia_assign("data", DF.l.inc)
julia_command("res = fit(MixedModel,
@formula(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * image * condition | lab)),
data)")
tmp <- julia_eval("res")
tmp <- julia_eval("[res]")
View(DF.w)
tmp
tmp %>% class()
library(tidyverse)
tmp %>% class()
summary(tmp)
julia_command("tmp = ([res], [data])")
tmp <- julia_eval("[tmp]")
tmp
summary(tmp)
tmp <- as(tmp, "merModLmerTest")
tmp <- julia_command("[res]")
tmp <- as(tmp, "merModLmerTest")
tmp <- julia_command("[tmp]")
tmp
tmp <- julia_eval("[res]")
View(tmp)
tmp <- julia_eval("@rput [res]")
julia_eval("@rput [res]")
julia_eval("@rput [tmp]")
julia_eval("@rput tmp")
julia_eval('R"summary(m_machines)"')
julia_eval('R"summary(tmp)"')
julia_eval("@rput tmp")
julia_eval('R"summary(tmp)"')
julia_command("tmp = ([res], [data])")
julia_eval("@rput tmp")
julia_eval('R"summary(tmp)"')
library(lme4)
library(JuliaCall)
DF.l.inc <- readRDS("data/DF.l.inc.rds")
options(JULIA_HOME = "C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin/")
julia_setup()
j_library("MixedModels")
j$library("MixedModels")
system.time(j <- julia_setup())
j$library("MixedModels")
j$library("JellyMe4")
library(lme4)
library(JuliaCall)
rm(ls = list())
rm(ls)
rm(ls())
rm(list = ls())
ls()
library(lme4)
library(JuliaCall)
library(jglmm)
DF.l.inc <- readRDS("data/DF.l.inc.rds")
options(JULIA_HOME = "C:/Users/ncole/AppData/Local/Programs/Julia-1.6.2/bin/")
julia_setup())
julia_setup()
lm1 <- jglmm(Reaction ~ Days + (Days | Subject), lme4::sleepstudy)
julia_ibrary("MixedModels")
julia_library("MixedModels")
lm1 <- jglmm(Reaction ~ Days + (Days | Subject), lme4::sleepstudy)
View(lm1)
summary(lm1)
lm1$model
lm1$model %>%  summary()
library(dplyr)
lm1$model %>% summary()
?jglmm
devtools::install_github("armgong/rjulia", ref="master", args = "--no-multiarch")
devtools::install_github("armgong/rjulia", ref="master", args = "--no-multiarch")
install.packages("rjulia")
# Chunk 1
library(lme4)
library(JuliaCall)
library(jglmm)
library(dplyr)
rm(list = ls())
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background =
element_rect(fill = "gray35"),
strip.text =
element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/DF.w.rds")
DF.l.full <- readRDS("data/DF.l.full.rds")
DF.l <- readRDS("data/DF.l.rds")
DF.l.inc <- readRDS("data/DF.l.inc.rds")
# Chunk 3
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# gender
table(DF.l$indiv_gend_var) %>% prop.table()
# age
DF.w %>%
summarise(m = mean(indiv_agee_var,
na.rm = T),
sd = sd(indiv_agee_var,
na.rm = T))
# Chunk 4
models <- list()
models[["primary"]][["prereg"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1| lab)
data = DF.l.inc)
models[["primary"]][["prereg"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1| lab),
data = DF.l.inc)
anova(models[["primary"]][["prereg"]])
summary(models[["primary"]][["prereg"]])
models[["primary"]][["prereg"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1| lab),
data = DF.l.inc,
REML = F)
summary(models[["primary"]][["prereg"]])
anova(models[["primary"]][["prereg"]])
