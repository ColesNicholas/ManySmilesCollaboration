# relevel factors
mutate(qual.ind = factor(qual.ind,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
qual.ind = recode(qual.ind,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity")
)
# Chunk 7
# m and sd for each quality indicator for each condition
desc1 <- f2.DF %>%
group_by(condition, qual.ind) %>%
summarise(m = round(mean(value,
na.rm = T),
2),
sd = round(sd(value, na.rm = T),
2))
# n for each quality indicator for each condition
desc2 <- f2.DF %>%
filter(!is.na(value)) %>%
group_by(condition, qual.ind) %>%
tally()
# combine
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
# Chunk 8
png(filename = "output/figures/Figure2.png",
units = "in",
width = 7,
height = 6.5,
res = 300)
ggplot(f2.DF,
aes(x = value)) +
# split plot by condition and moderator
facet_grid(cols = vars(condition),
rows = vars(qual.ind),
scales = "free_y") +
# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
# add bin-specific percentage counts to histogram
stat_bin(aes(y = stat(width*density),
label =
paste0((round(stat(width*density),
2) * 100),
"%")),
geom = "text",
bins = 7,
size = 2,
vjust = -.21) +
# paste descriptive statistics to left of histogram
geom_text(data = desc,
aes(label = paste0("n = ", n,
"\n",
"M = ", m,
"\n",
"SD = ", sd)),
x = -1.25,
y = Inf,
size = 2,
hjust = 0,
vjust = 1.25) +
# fix scales
scale_x_continuous(name = "Self-reported rating",
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(.30, .01))) +
scale_y_continuous(expand = expand_scale(mult = c(0, .14)),
name = "Percent",
labels = scales::percent_format())
dev.off()
rm(f2.DF, desc)
# Chunk 9
f2b.DF <- DF.l.inc %>%
# select relevant variables
select(ResponseId, trial, condition,
qulty_rate_var, qulty_feel_var, qulty_smlr_var) %>%
# pivot longer so that there is one row for each moderator
pivot_longer(cols = c(qulty_rate_var,
qulty_smlr_var,
qulty_feel_var),
names_to = "qual.ind") %>%
# delete duplicate set of observations in the neutral trial
filter(trial == "happy") %>%
# relevel factors
mutate(qual.ind = factor(qual.ind,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
qual.ind = recode(qual.ind,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity")
)
# Chunk 10
# m and sd for each quality indicator for each condition
desc1 <- f2b.DF %>%
group_by(condition, qual.ind) %>%
summarise(m = round(mean(value,
na.rm = T),
2),
sd = round(sd(value, na.rm = T),
2))
# n for each quality indicator for each condition
desc2 <- f2b.DF %>%
filter(!is.na(value)) %>%
group_by(condition, qual.ind) %>%
tally()
# combine
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
# Chunk 11
png(filename = "output/figures/Figure2b.png",
units = "in",
width = 7,
height = 6.5,
res = 300)
ggplot(f2b.DF,
aes(x = value)) +
# split plot by condition and moderator
facet_grid(cols = vars(condition),
rows = vars(qual.ind),
scales = "free_y") +
# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
# add bin-specific percentage counts to histogram
stat_bin(aes(y = stat(width*density),
label =
paste0((round(stat(width*density),
2) * 100),
"%")),
geom = "text",
bins = 7,
size = 2,
vjust = -.21) +
# paste descriptive statistics to left of histogram
geom_text(data = desc,
aes(label = paste0("n = ", n,
"\n",
"M = ", m,
"\n",
"SD = ", sd)),
x = -1.25,
y = Inf,
size = 2,
hjust = 0,
vjust = 1.25) +
# fix scales
scale_x_continuous(name = "Self-reported rating",
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(.30, .01))) +
scale_y_continuous(expand = expand_scale(mult = c(0, .14)),
name = "Percent",
labels = scales::percent_format())
dev.off()
rm(f2b.DF, desc)
# Chunk 12
f3.DF <- DF.l.inc %>%
select(ResponseId, condition, image, trial, happiness) %>%
pivot_wider(names_from = "trial",
values_from = "happiness") %>%
rowwise() %>%
mutate(happiness.avg = mean(c(happy, neutral))) %>%
ungroup()
# Chunk 13
desc <- f3.DF %>%
group_by(image, condition) %>%
summarise(n = n(),
m = round(mean(happiness.avg),
2),
sd = round(sd(happiness.avg),
2))
# Chunk 14
png(
filename = "output/figures/Figure3.png",
units = "in",
width = 7,
height = 6.5,
res = 300
)
ggplot(f3.DF,
aes(x = image,
y = happiness.avg)) +
facet_grid(cols = vars(condition)) +
geom_jitter(width = .1,
alpha = .07,
colour = "dark grey") +
geom_boxplot(colour = 'dark grey',
fill = NA,
outlier.shape = NA) +
stat_summary(colour = "#3366FF",
size = .5,
fun = "mean") +
labs(y = "Self-reported happiness",
x = "Stimuli Presence") +
# add task-specific M's, SDs,
geom_text(data = desc,
aes(label = paste0("n = ", n,
"\n",
"M = ", m,
"\n",
"SD = ", sd)),
y = 7.3,
size = 2) +
scale_y_continuous(
breaks = c(1, 3, 5, 7)) +
# adjust scales
scale_y_continuous(
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(0, .1))) +
scale_x_discrete(labels = c("absent", "present"))
dev.off()
rm(desc, f3.DF)
# Chunk 15
f4.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1)
# Chunk 16
desc1 <- f4.DF %>%
group_by(trial, condition, image) %>%
summarise(m = round(mean(happiness),
2),
sd = round(sd(happiness),
2))
desc2 <- f4.DF %>%
group_by(condition, image) %>%
summarise(n = length(unique(ResponseId)))
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
# Chunk 17
png(filename = "output/figures/Figure4.png",
units = "in",
width = 7,
height = 6.5,
res = 300)
ggplot(f4.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .07,
colour = "dark grey") +
# connect participants' jittered raw data
geom_line(alpha = .07,
aes(group = ResponseId),
colour = "dark grey") +
# add summary lines
stat_summary(geom = "line",
colour = "#3366FF",
size = 1,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .5,
fun = "mean") +
# add task-specific M's and SDs
geom_text(data = desc,
aes(label = paste0("M = ", m,
"\n",
"SD = ", sd)),
y = Inf,
size = 2,
vjust = 2) +
# add condition-specific ns
geom_text(data = desc,
aes(label = paste0("n = ", n)),
x = 2.5,
y = Inf,
size = 2,
vjust = 2) +
# adjust scales
scale_x_discrete(
expand = expand_scale(mult = c(.2, .2))) +
scale_y_continuous(
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(0, .25))) +
labs(y = "Self-reported happiness",
x = "Task")
dev.off()
rm(f4.DF, desc)
# Chunk 18
f5.DF <- DF.l %>%
# select relevant variables
select(ResponseId, trial, condition,
happiness, qulty_rate_var,
qulty_feel_var, qulty_smlr_var) %>%
# calculate a difference score between the happy and neutral posesâ˜º
pivot_wider(names_from = trial,
values_from = happiness) %>%
rowwise() %>%
mutate(happ.diff = happy - neutral) %>%
ungroup() %>%
# pivot longer so that there is one row for each moderator
pivot_longer(cols = c(qulty_rate_var,
qulty_smlr_var,
qulty_feel_var,
),
names_to = "mod") %>%
# relevel factors
mutate(mod = factor(mod,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
mod = recode(mod,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity",))
# Chunk 19
f5.DF$sig.cross = as.numeric(NA)
f5.DF$mode = as.numeric(NA)
# compliance
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "compliance", ]$sig.cross <- 5
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "compliance", ]$mode <- 7
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "compliance", ]$sig.cross <- 5
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "compliance", ]$mode <- 7
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "compliance", ]$sig.cross <- 6
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DFz$mod == "compliance", ]$mode <- 7
# similarity
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "similarity", ]$sig.cross <- 3
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "similarity", ]$mode <- 6
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "similarity", ]$sig.cross <- 2
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "similarity", ]$mode <- 7
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "similarity", ]$sig.cross <- 2
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "similarity", ]$mode <- 6
# genuineness
f5.DF[f5.DF$mod == "genuineness", ]$sig.cross <- 2
f5.DF[f5.DF$condition == "facial mimicry" &
f5.DF$mod == "genuineness", ]$mode <- 5
f5.DF[f5.DF$condition == "voluntary facial action" &
f5.DF$mod == "genuineness", ]$mode <- 5
f5.DF[f5.DF$condition == "pen-in-mouth" &
f5.DF$mod == "genuineness", ]$mode <- 1
# Chunk 20
png(filename = "output/figures/Figure5.png",
units = "in",
height = 7,
width = 6.5,
res = 300)
ggplot(f5.DF,
aes(x = value,
y = happ.diff)) +
facet_grid(cols = vars(condition),
rows = vars(mod)) +
geom_rect(aes(xmin = sig.cross - .25,
xmax = 7.25,
ymin = -6,
ymax = 6),
fill = "lightgreen",
alpha = .01) +
geom_rect(aes(xmin = mode - .25,
xmax = mode + .25,
ymin = -6,
ymax = 6),
fill = NA,
colour = "black") +
geom_jitter(width = .1,
alpha = .2,
colour = "dark grey") +
geom_smooth(method = 'lm') +
xlab("Self-reported rating") +
ylab("Change in self-reported happiness") +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
dev.off()
rm(f5.DF)
# Chunk 21
DF.l.inc <- DF.l.inc %>%
mutate(image = recode(image,
`positive stimuli absent` = "absentt",
`positive stimuli present` = "present")
)
# Chunk 22
pose.es.DF <- DF.l.inc %>%
# pivot data wider
pivot_wider(names_from = trial,
values_from = happiness,
id_cols = c(ResponseId,
country,
lab,
UserLanguage,
condition)) %>%
# calculate difference score
rowwise() %>%
mutate(diff = happy - neutral) %>%
# for each condition and country, find correlation between two trials and the mean/sd of the difference score
group_by(condition, country) %>%
summarise(n = n(),
corr = cor(happy, neutral),
m.diff = mean(diff),
sd.diff = sd(diff)) %>%
ungroup() %>%
# calculate cohen drm
# formula: Cooper, Hedges, & Valentine, 2009; p. 229
rowwise() %>%
mutate(d = (m.diff / sd.diff) *
sqrt(2 * (1 - corr))) %>%
# calculate variance of d
mutate(d.var = ((1 / n) + ((d^2) / (2 * n))) *
2 * (1 - corr)) %>%
# calculate CI of d
mutate(lb = d - (1.96 * sqrt(d.var)),
ub = d + (1.96 * sqrt(d.var))) %>%
# select relevant variables
select(condition, country, d, d.var, lb, ub)
# Chunk 23
img.es.DF <- DF.l.inc %>%
# pivot data wide
pivot_wider(names_from = trial,
values_from = happiness,
id_cols = c(ResponseId,
country,
image,
lab,
UserLanguage,
condition)) %>%
# remove pen-in-mouth
filter(condition != "pentask") %>%
# calculate happiness mean and sd when images were present vs. absent in each country
group_by(country, image) %>%
summarise(n = n(),
m = mean(neutral),
sd = sd(neutral)) %>%
ungroup() %>%
# pivot data wider
pivot_wider(names_from = image,
values_from = c(n, m, sd)) %>%
# calculate cohen's drm
# formula: Cooper, Hedges, & Valentine, 2009; p. 226
rowwise() %>%
mutate(sd.pooled = sqrt((((n_absentt - 1) * (sd_absentt^2)) +
((n_present - 1) * (sd_present^2))) /
(n_absentt + n_present - 2))) %>%
mutate(d = (m_present - m_absentt) / sd.pooled) %>%
# calculate variance of cohen's d
mutate(d.var = ((n_absentt + n_present) / (n_absentt * n_present)) +
((d^2) / (2 * (n_absentt + n_present)))) %>%
# calculate CI of d
mutate(lb = d - (1.96 * sqrt(d.var)),
ub = d + (1.96 * sqrt(d.var))) %>%
# match formatting with meta.DF
mutate(condition = "image") %>%
select(condition, country, d, d.var, lb, ub)
# Chunk 24
meta.DF <- rbind(pose.es.DF, img.es.DF) %>%
as.data.frame()
rm(pose.es.DF, img.es.DF)
# Chunk 25
# overall effect
rma(
yi = d,
vi = d.var,
slab = country,
data = meta.DF,
subset = condition != "image"
)
# moderation by facial feedback task
rma(
yi = d,
vi = d.var,
mods = condition,
slab = country,
data = meta.DF,
subset = condition != "image"
)
# facial feedback task meta-analysis
meta.m  <- rma(
yi = d,
vi = d.var,
slab = country,
data = meta.DF,
subset = condition == "facial mimicry")
meta.d <- rma(
yi = d,
vi = d.var,
slab = country,
data = meta.DF,
subset = condition == "voluntary facial action"
)
meta.p <- rma(
yi = d,
vi = d.var,
slab = country,
data = meta.DF,
subset = condition == "pen-in-mouth"
)
# meta-analysis for images
meta.i <- rma(
yi = d,
vi = d.var,
slab = country,
data = meta.DF,
subset = condition == "image"
)
