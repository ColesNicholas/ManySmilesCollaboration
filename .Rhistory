neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# prep dataframe
f2.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
# select relevant variables
select(ResponseId, trial, happiness,
image, condition) %>%
# recode trial
mutate(trial = recode(trial,
`filler 1`  = "filler",
`filler 2`  = "filler"))
f2.DF <- f2.DF %>%
filter(trial != "filler")
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = .22,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .25,
width = .10,
fun.data = mean_se,
geom = "errorbar") +
# add task-specific M's and SDs
geom_text(data = desc,
aes(label = paste0("M = ", m,
"\n",
"SD = ", sd)),
y = Inf,
size = 1,
vjust = 2) +
# adjust scales
scale_x_discrete(
expand = expand_scale(mult = c(.2, .2))) +
scale_y_continuous(
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(0, .25))) +
labs(y = "Self-reported happiness",
x = "Task")
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition))
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey")
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = .22,
aes(group = 1))
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = .22,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .25,
width = .10,
fun.data = mean_se,
geom = "errorbar")
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = .22,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .25,
width = .10,
fun.data = mean_se,
geom = "errorbar") +
# add task-specific M's and SDs
geom_text(data = desc,
aes(label = paste0("M = ", m,
"\n",
"SD = ", sd)),
y = Inf,
size = 1,
vjust = 2)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'ggtext', 'metafor',
'ggpubr', "gridExtra",
"sf", "rnaturalearth", "rnaturalearthdata",
"ggspatial"
)
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35",
size = .35),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none",
axis.title = element_text(size = 6),
axis.text = element_text(size = 5),
axis.line = element_line(size = .25),
axis.ticks = element_line(size = .25),
strip.text.x = element_text(size = 5),
strip.text.y = element_text(size = 5)
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
DF.l <- DF.l %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 4
DF.l.full <- DF.l.full %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 5
DF.l.inc <- DF.l.inc %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# prep dataframe
f2.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
# select relevant variables
select(ResponseId, trial, happiness,
image, condition) %>%
# recode trial
mutate(trial = recode(trial,
`filler 1`  = "filler",
`filler 2`  = "filler"))
f2.DF <- f2.DF %>%
filter(trial != "filler")
# get descriptives
desc1 <- f2.DF %>%
group_by(trial, condition, image) %>%
summarise(m = round(mean(happiness),
2),
sd = round(sd(happiness),
2))
desc2 <- f2.DF %>%
group_by(condition, image) %>%
summarise(n = length(unique(ResponseId)))
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
ggplot(f2.DF,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .15,
size = .25,
colour = "dark grey") +
stat_summary(geom = "line",
colour = "#3366FF",
size = .22,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = .25,
width = .10,
fun.data = mean_se,
geom = "errorbar") +
# add task-specific M's and SDs
geom_text(data = desc,
aes(label = paste0("M = ", m,
"\n",
"SD = ", sd)),
y = Inf,
size = 1,
vjust = 2) +
# adjust scales
scale_x_discrete(
expand = expand_scale(mult = c(.2, .2))) +
scale_y_continuous(
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(0, .25))) +
labs(y = "Self-reported happiness",
x = "Task")
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
#'lmerTest',
'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background =
element_rect(fill = "gray35"),
strip.text =
element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
DF.viz <-
DF.l.inc %>%
mutate(trial = factor(trial,
levels = c("neutr",
"happy")),
trial = recode(trial,
neutr = "neutral",
happy = "happy"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
image = factor(image,
levels = c("present",
"absentt")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
present = "positive stimuli present",
absentt = "positive stimuli absent")
)
# get descriptives
tmp <- DF.viz %>%
group_by(trial, condition, image) %>%
summarise(m = round(mean(happiness),
2),
sd = round(sd(happiness),
2))
tmp2 <- DF.viz %>%
group_by(condition, image) %>%
summarise(n = length(unique(ResponseId)))
tmp3 <- full_join(tmp, tmp2)
rm(tmp, tmp2)
ggplot(DF.viz,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .07,
colour = "dark grey") +
# connect participants' jittered raw data
geom_line(alpha = .07,
aes(group = ResponseId),
colour = "dark grey") +
# add summary lines
stat_summary(geom = "line",
colour = "#3366FF",
size = 1,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = 1,
width = .10,
fun.data = mean_se,
geom = "errorbar") +
# add task-specific M's and SDs
geom_text(data = tmp3,
aes(label = paste0("M = ", m,
"\n",
"SD = ", sd)),
y = Inf,
size = 2,
vjust = 2) +
# add condition-specific ns
# geom_text(data = tmp3,
#           aes(label = paste0("n = ", n)),
#           x = 2.5,
#           y = Inf,
#           size = 2,
#           vjust = 2) +
# adjust scales
scale_x_discrete(
expand = expand_scale(mult = c(.2, .2))) +
scale_y_continuous(
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(0, .25))) +
labs(y = "Self-reported happiness",
x = "Facial expression pose")
# get descriptives
tmp <- DF.viz %>%
group_by(trial, condition, image) %>%
summarise(m = round(mean(happiness),
2),
sd = round(sd(happiness),
2))
tmp2 <- DF.viz %>%
group_by(condition, image) %>%
summarise(n = length(unique(ResponseId)))
tmp3 <- full_join(tmp, tmp2)
rm(tmp, tmp2)
# prepare plot
png(filename = "output/figures/presentation/Figure1.png",
units = "in",
height = 7,
width = 6.5,
res = 300)
# plot
ggplot(DF.viz,
aes(x = trial,
y = happiness)) +
# split plot by image and condition
facet_grid(rows = vars(image),
cols = vars(condition)) +
# add jittered raw data
geom_jitter(width = .1,
alpha = .07,
colour = "dark grey") +
# connect participants' jittered raw data
geom_line(alpha = .07,
aes(group = ResponseId),
colour = "dark grey") +
# add summary lines
stat_summary(geom = "line",
colour = "#3366FF",
size = 1,
aes(group = 1)) +
stat_summary(colour = "#3366FF",
size = 1,
width = .10,
fun.data = mean_se,
geom = "errorbar") +
# add task-specific M's and SDs
geom_text(data = tmp3,
aes(label = paste0("M = ", m,
"\n",
"SD = ", sd)),
y = Inf,
size = 2,
vjust = 2) +
# add condition-specific ns
# geom_text(data = tmp3,
#           aes(label = paste0("n = ", n)),
#           x = 2.5,
#           y = Inf,
#           size = 2,
#           vjust = 2) +
# adjust scales
scale_x_discrete(
expand = expand_scale(mult = c(.2, .2))) +
scale_y_continuous(
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(0, .25))) +
labs(y = "Self-reported happiness",
x = "Facial expression pose")
dev.off()
