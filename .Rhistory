# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
#
geom_rect(aes(xmin = sig.cross - .25,
xmax = 7.25,
ymin = 0,
ymax = .8
),
fill = "lightgreen",
alpha = .01)
f2.DF$qual.ind %>% max()\
f2.DF$qual.ind %>% max()
f2.DF$value %>% max()
f2.DF$value %>% max(na.rm = T)
ggplot(f2.DF,
aes(x = value)) +
# split plot by condition and moderator
facet_grid(cols = vars(condition),
rows = vars(qual.ind),
scales = "free_y") +
# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
#
geom_rect(aes(xmin = sig.cross - .25,
xmax = 7.25,
ymin = 0,
ymax = .8
),
fill = "lightgreen",
alpha = .01) +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
ggplot(f2.DF,
aes(x = value)) +
# split plot by condition and moderator
facet_grid(cols = vars(condition),
rows = vars(qual.ind),
scales = "free_y") +
# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
#
geom_rect(aes(xmin = sig.cross,
xmax = 7,
ymin = 0,
ymax = .8
),
fill = "lightgreen",
alpha = .01) +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
tmp <- DF.l.inc %>%
filter(genuineness > 1)
tmp <- DF.l.inc %>%
dplyr::filter(genuineness > 1)
tmp <- DF.l.inc %>%
filter(qulty_feel_var > 1)
m <-
lmer(happiness ~ trial * condition * image +
(1 | lab) + (1 | ResponseId),
data = tmp)
summary(m)
anova(m)
joint_tests(m,
by = "condition",
lmerTest.limit = 9999)
tmp <- DF.l.inc %>%
filter(qulty_feel_var > 2)
m <-
lmer(happiness ~ trial * condition * image +
(1 | lab) + (1 | ResponseId),
data = tmp)
# inspect results
summary(m)
anova(m)
joint_tests(m,
by = "condition",
lmerTest.limit = 9999)
tmp <- DF.l.inc %>%
filter(qulty_feel_var > 3)
m <-
lmer(happiness ~ trial * condition * image +
(1 | lab) + (1 | ResponseId),
data = tmp)
# inspect results
summary(m)
anova(m)
joint_tests(m,
by = "condition",
lmerTest.limit = 9999)
tmp <- DF.l.inc %>%
filter(qulty_feel_var > 4)
m <-
lmer(happiness ~ trial * condition * image +
(1 | lab) + (1 | ResponseId),
data = tmp)
# inspect results
summary(m)
anova(m)
joint_tests(m,
by = "condition",
lmerTest.limit = 9999)
tmp <- DF.l.inc %>%
filter(qulty_feel_var > 5)
m <-
lmer(happiness ~ trial * condition * image +
(1 | lab) + (1 | ResponseId),
data = tmp)
# inspect results
summary(m)
anova(m)
joint_tests(m,
by = "condition",
lmerTest.limit = 9999)
f2.DF <- DF.l.inc %>%
# select relevant variables
dplyr::select(ResponseId, trial, condition,
qulty_rate_var, qulty_feel_var, qulty_smlr_var) %>%
# pivot longer so that there is one row for each moderator
pivot_longer(cols = c(qulty_rate_var,
qulty_smlr_var,
qulty_feel_var),
names_to = "qual.ind") %>%
# delete duplicate set of observations in the neutral trial
filter(trial == "happy") %>%
# relevel factors
mutate(qual.ind = factor(qual.ind,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
qual.ind = dplyr::recode(qual.ind,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity")
)
# add sig cutoffs
f2.DF <- as.data.frame(f2.DF)
f2.DF$sig.cross <- NA
f2.DF[f2.DF$qual.ind == "compliance", ]$sig.cross <- 4.17
f2.DF[f2.DF$qual.ind == "similarity", ]$sig.cross <- 1.73
f2.DF[f2.DF$qual.ind == "genuineness", ]$sig.cross <- 1.69
ggplot(f2.DF,
aes(x = value)) +
# split plot by condition and moderator
facet_grid(cols = vars(condition),
rows = vars(qual.ind),
scales = "free_y") +
# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
#
geom_rect(aes(xmin = sig.cross,
xmax = 7,
ymin = 0,
ymax = .8
),
fill = "lightgreen",
alpha = .01) +
scale_x_continuous(
breaks = c(1, 3, 5, 7))
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'ggtext', 'metafor',
'ggpubr')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
DF.l <- DF.l %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 4
DF.l.full <- DF.l.full %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 5
DF.l.inc <- DF.l.inc %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'ggtext', 'metafor',
'ggpubr')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
DF.l <- DF.l %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 4
DF.l.full <- DF.l.full %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'ggtext', 'metafor',
'ggpubr')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 3
DF.l <- DF.l %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 4
DF.l.full <- DF.l.full %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
# Chunk 5
DF.l.inc <- DF.l.inc %>%
mutate(trial = factor(trial,
levels = c("happy",
"neutr",
"fil.1",
"fil.4")),
trial = recode(trial,
fil.1 = "filler 1",
happy = "happy",
neutr = "neutral",
fil.4 = "filler 2"),
condition = factor(condition,
levels = c("mimicry",
"directd",
"pentask")),
condition = recode(condition,
directd = "voluntary facial action",
mimicry = "facial mimicry",
pentask = "pen-in-mouth"),
image = recode(image,
absentt = "positive stimuli absent",
present = "positive stimuli present")
)
DF.l.full$trial %>% unique()
?if_else
f2.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
# recode trial
mutate(trial = recode(trial,
`filler 1`  = "filler",
`filler 2`  = "filler"
))
f2.DF$trial
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position= "top")
f2.DF <- DF.l.full %>%
# apply inclusion criteria
filter(inc == 1,
inc.awa == 1) %>%
# recode trial
mutate(trial = recode(trial,
`filler 1`  = "filler",
`filler 2`  = "filler"))
png(filename = "output/figures/Figure2.png",
units = "in",
width = 7,
height = 4,
res = 300)
ggline(f2.DF,
x = "trial", y = "happiness",
add = c("mean_se"),
facet.by = "condition",
color = "image",
palette = "jco") +
theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position= "top")
dev.off()
rm(f2.DF)
