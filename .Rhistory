sd.gen = sd(qulty_feel_var))
f2.DF <- DF.l %>%
# select relevant variables
select(ResponseId, trial, condition,
qulty_rate_var, qulty_feel_var, qulty_smlr_var) %>%
# pivot longer so that there is one row for each moderator
pivot_longer(cols = c(qulty_rate_var,
qulty_smlr_var,
qulty_feel_var),
names_to = "qual.ind") %>%
# delete duplicate set of observations in the neutral trial
filter(trial == "happy") %>%
# relevel factors
mutate(qual.ind = factor(qual.ind,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
qual.ind = recode(qual.ind,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity")
)
# m and sd for each quality indicator for each condition
desc1 <- f2.DF %>%
group_by(condition, qual.ind) %>%
summarise(m = round(mean(value,
na.rm = T),
2),
sd = round(sd(value, na.rm = T),
2))
# n for each quality indicator for each condition
desc2 <- f2.DF %>%
filter(!is.na(value)) %>%
group_by(condition, qual.ind) %>%
tally()
# combine
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
ggplot(f2.DF,
aes(x = value)) +
# split plot by condition and moderator
facet_grid(cols = vars(condition),
rows = vars(qual.ind),
scales = "free_y") +
# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
# add bin-specific percentage counts to histogram
stat_bin(aes(y = stat(width*density),
label =
paste0((round(stat(width*density),
2) * 100),
"%")),
geom = "text",
bins = 7,
size = 2,
vjust = -.21) +
# paste descriptive statistics to left of histogram
geom_text(data = desc,
aes(label = paste0("n = ", n,
"\n",
"M = ", m,
"\n",
"SD = ", sd)),
x = -1.25,
y = Inf,
size = 2,
hjust = 0,
vjust = 1.25) +
# fix scales
scale_x_continuous(name = "Self-reported rating",
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(.30, .01))) +
scale_y_continuous(expand = expand_scale(mult = c(0, .14)),
name = "Percent",
labels = scales::percent_format())
rm(f2.DF, desc)
# fit model
models[["primary"]][["prereg.min"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l.inc)
models <- list()
# inspect results
summary(models[["primary"]][["prereg.min"]])
anova(models[["primary"]][["prereg.min"]])
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2', 'lme4',
'lmerTest', 'emmeans', 'metafor',
'ggtext')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting options
theme_set(theme_classic() +
theme(strip.background = element_rect(fill = "gray35"),
strip.text =element_text(colour = "white"),
panel.border = element_blank(),
legend.position = "none"
)
)
# Chunk 2
DF.w <- readRDS("data/processed/DF.w.rds")
DF.l.full <- readRDS("data/processed/DF.l.full.rds")
DF.l.full.inc <- readRDS("data/processed/DF.l.full.inc.rds")
DF.l <- readRDS("data/processed/DF.l.rds")
DF.l.inc <- readRDS("data/processed/DF.l.inc.rds")
# Chunk 4
# n participants
DF.w %>% nrow()
# n labs
DF.l$lab %>% unique() %>% length()
# n countries
DF.l$lab %>%
substr(start = 1,
stop = 3) %>%
unique() %>%
length()
# condition n
table(DF.l$condition) %>% prop.table()
table(DF.l$condition, DF.l$image) %>% prop.table()
# descriptives
DF.w %>%
summarise(n = n(),
m.age = mean(indiv_agee_var,
na.rm = T),
sd.age = sd(indiv_agee_var,
na.rm = T),
g.women = sum(indiv_gend_var == 1, na.rm = T) / n(),
g.men = sum(indiv_gend_var == 2, na.rm = T) / n(),
g.other = sum(indiv_gend_var == 3, na.rm = T) / n(),
# inclusion criteria pass rate
inc.dev = mean(inc.dev),
inc.att = mean(inc.att),
inc.fol = mean(inc.fol),
inc.mat = mean(inc.mat),
inc.dis = sum(inc.dis, na.rm = T) / n(),
inc.awa = sum(inc.awa, na.rm = T) / n()
)
# n participants who met inclusion criteria
DF.l.inc$ResponseId %>% unique() %>% length()
# Chunk 5
f2.DF <- DF.l %>%
# select relevant variables
select(ResponseId, trial, condition,
qulty_rate_var, qulty_feel_var, qulty_smlr_var) %>%
# pivot longer so that there is one row for each moderator
pivot_longer(cols = c(qulty_rate_var,
qulty_smlr_var,
qulty_feel_var),
names_to = "qual.ind") %>%
# delete duplicate set of observations in the neutral trial
filter(trial == "happy") %>%
# relevel factors
mutate(qual.ind = factor(qual.ind,
levels = c("qulty_rate_var",
"qulty_feel_var",
"qulty_smlr_var")),
qual.ind = recode(qual.ind,
qulty_rate_var = "compliance",
qulty_feel_var = "genuineness",
qulty_smlr_var = "similarity")
)
# Chunk 6
# m and sd for each quality indicator for each condition
desc1 <- f2.DF %>%
group_by(condition, qual.ind) %>%
summarise(m = round(mean(value,
na.rm = T),
2),
sd = round(sd(value, na.rm = T),
2))
# n for each quality indicator for each condition
desc2 <- f2.DF %>%
filter(!is.na(value)) %>%
group_by(condition, qual.ind) %>%
tally()
# combine
desc <- full_join(desc1, desc2)
rm(desc1, desc2)
# Chunk 7
ggplot(f2.DF,
aes(x = value)) +
# split plot by condition and moderator
facet_grid(cols = vars(condition),
rows = vars(qual.ind),
scales = "free_y") +
# plot histogram (as percentage)
geom_histogram(aes(y = stat(width*density)),
bins = 7,
fill = "gray60") +
# add bin-specific percentage counts to histogram
stat_bin(aes(y = stat(width*density),
label =
paste0((round(stat(width*density),
2) * 100),
"%")),
geom = "text",
bins = 7,
size = 2,
vjust = -.21) +
# paste descriptive statistics to left of histogram
geom_text(data = desc,
aes(label = paste0("n = ", n,
"\n",
"M = ", m,
"\n",
"SD = ", sd)),
x = -1.25,
y = Inf,
size = 2,
hjust = 0,
vjust = 1.25) +
# fix scales
scale_x_continuous(name = "Self-reported rating",
breaks = c(1, 3, 5, 7),
expand = expand_scale(mult = c(.30, .01))) +
scale_y_continuous(expand = expand_scale(mult = c(0, .14)),
name = "Percent",
labels = scales::percent_format())
rm(f2.DF, desc)
# Chunk 8
models <- list()
models[["primary"]][["prereg.min"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l.inc)
# inspect results
summary(models[["primary"]][["prereg.min"]])
anova(models[["primary"]][["prereg.min"]])
anova(models[["primary"]][["prereg.min"]])
joint_tests(models[["primary"]][["prereg.min"]],
by = "condition",
lmerTest.limit = 9999)
joint_tests(models[["primary"]][["prereg.min"]],
by = c("image", "condition"),
lmerTest.limit = 9999)
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ image,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ image | condition,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ trial | condition,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ trial | image |condition,
adjust = "none")
joint_tests(models[["primary"]][["prereg.min"]],
by = "condition",
lmerTest.limit = 9999)
joint_tests(models[["primary"]][["prereg.min"]],
by = c("image", "condition"),
lmerTest.limit = 9999)
joint_tests(models[["primary"]][["prereg.min"]],
by = "condition",
lmerTest.limit = 9999)
joint_tests(models[["primary"]][["prereg.min"]],
by = c("image", "condition"),
lmerTest.limit = 9999)
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ image,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ image | condition,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ trial | condition,
adjust = "none")
emmeans(models[["primary"]][["prereg.min"]],
pairwise ~ trial | image |condition,
adjust = "none")
models[["primary"]][["prereg.max"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 + trial * condition * image | lab),
data = DF.l.inc)
library(BayesFactor)
citation(BayesFactor)
citation("BayesFactor")
anova(models[["primary"]][["prereg.max"]])
joint_tests(models[["primary"]][["prereg.max"]],
by = "condition",
lmerTest.limit = 9999)
joint_tests(models[["primary"]][["prereg.max"]],
by = c("image", "condition"),
lmerTest.limit = 9999)
emmeans(models[["primary"]][["prereg.max"]],
pairwise ~ trial | image | condition,
adjust = "none")
emmeans(models[["primary"]][["prereg.max"]],
pairwise ~ trial | condition,
adjust = "none")
# fit model
models[["primary"]][["full.sens"]] <-
lmer(happiness ~ trial * condition * image +
(1 | ResponseId) +
(1 | lab),
data = DF.l)
joint_tests(models[["primary"]][["full.sens"]],
by = "condition",
lmerTest.limit = 9999)
emmeans(models[["primary"]][["full.sens"]],
pairwise ~ trial | condition,
adjust = "none")
# fit model
models[["secondary"]][["alt.exp"]] <-
lmer(happiness ~ trial * condition * image +
(1 | lab) +
(1 | ResponseId),
data = DF.l.full.inc)
# inspect results
anova(models[["secondary"]][["alt.exp"]])
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial | condition | image,
adjust = "none")
joint_tests(models[["secondary"]][["alt.exp"]],
by = "image",
lmerTest.limit = 9999)
emmeans(models[["secondary"]][["alt.exp"]],
pairwise ~ trial | condition | image,
adjust = "none")
m <- lmer(happiness ~
trial * image * qulty_rate_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "mimicry")
m %>% anova()
m %>% summary()
m %>% confint()
m <- lmer(happiness ~
trial * image * qulty_rate_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "directd")
m %>% summary()
m %>% confint()
m <- lmer(happiness ~
trial * image * qulty_rate_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "pentask")
m %>% anova()
m %>% summary()
m %>% confint()
m <- lmer(happiness ~
trial * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "mimicry")
m %>% anova()
m %>% summary()
m %>% confint()
m <- lmer(happiness ~
trial * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "directd")
m %>% anova()
m %>% summary()
m %>% confint()
m <- lmer(happiness ~
trial * image * qulty_smlr_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "pentask")
m %>% anova()
m %>% summary()
m %>% confint()
# facial mimicry
m <- lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "mimicry")
m %>% anova()
m %>% summary()
m %>% confint()
m <- lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "directd")
m %>% anova()
m %>% summary()
m %>% confint()
m <- lmer(happiness ~
trial * image * qulty_feel_var.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l,
subset = condition == "pentask")
m %>% anova()
m %>% summary()
m %>% confint()
models[["secondary"]][["awareness.diff"]] <-
lmer(awareness ~ condition + image +
(1 | lab),
data = DF.w)
# inspect results
anova(models[["secondary"]][["awareness.diff"]])
DF.w %>%
group_by(condition) %>%
summarise(m.awa = mean(awareness,
na.rm = T),
sd.awa = sd(awareness,
na.rm = T))
emmeans(models[["secondary"]][["awareness.diff"]],
pairwise ~ condition,
adjust = "none")
# fit model
models[["secondary"]][["awareness"]] <-
lmer(happiness ~
trial * condition * image * awareness.c +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
models[["secondary"]][["awareness"]] %>% anova()
models[["secondary"]][["awareness"]] %>% summary()
models[["secondary"]][["awareness"]] %>% confint()
# fit model
models[["secondary"]][["body.aware"]] <-
lmer(happiness ~
trial * condition * image *  indiv_body +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
models[["secondary"]][["body.aware"]] %>% summary()
models[["secondary"]][["body.aware"]] %>% confint()
# fit model
models[["secondary"]][["anxiety"]] <-
lmer(anxiety ~ trial * image * condition +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
anova(models[["secondary"]][["anxiety"]])
# fit model
models[["secondary"]][["anger"]] <-
lmer(anger ~ trial * image * condition +
(1 | lab) +
(1 | ResponseId),
data = DF.l)
# inspect results
anova(models[["secondary"]][["anger"]])
emmeans(models[["secondary"]][["anxiety"]],
pairwise ~  condition,
adjust = "none")
DF.l %>%
group_by(condition) %>%
summarise(m.anx = mean(anxiety),
sd.anx = sd(anxiety),
m.ang = mean(anger),
sd.ang = sd(anger))
DF.l %>%
group_by(trial) %>%
summarise(m.anx = mean(anxiety),
sd.anx = sd(anxiety),
m.ang = mean(anger),
sd.ang = sd(anger))
m <-
lmer(happiness ~ trial * image * condition + anxiety +
(1 | ResponseId) +
(1 | lab),
data = DF.l.inc)
summary(m)
confint(m)
# filter data
DF.inc.no.anx <- DF.l.inc %>%
filter(anxiety == 1)
# sample size
DF.inc.no.anx$ResponseId %>% unique %>% length()
# fit model
models[["exploratory"]][["no.anx"]] <-
lmer(happiness ~ trial * image * condition +
(1 | ResponseId) +
(1 | lab),
data = DF.inc.no.anx)
# inspect results
anova(models[["exploratory"]][["no.anx"]])
joint_tests(models[["exploratory"]][["no.anx"]],
by = "condition",
lmerTest.limit = 9999)
